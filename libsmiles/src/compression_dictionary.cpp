#include <array>
#include <cassert>
#include "compression_dictionary.hpp"

namespace smiles {

  const std::array<smiles_dictionary_entry, 256> SMILES_DICTIONARY = {{
      {"ERROR", 5}, // to avoid non-printable character no 0
      {"ERROR", 5}, // to avoid non-printable character no 1
      {"ERROR", 5}, // to avoid non-printable character no 2
      {"ERROR", 5}, // to avoid non-printable character no 3
      {"ERROR", 5}, // to avoid non-printable character no 4
      {"ERROR", 5}, // to avoid non-printable character no 5
      {"ERROR", 5}, // to avoid non-printable character no 6
      {"ERROR", 5}, // to avoid non-printable character no 7
      {"ERROR", 5}, // to avoid non-printable character no 8
      {"ERROR", 5}, // to avoid non-printable character no 9
      {"ERROR", 5}, // to avoid non-printable character no 10
      {"ERROR", 5}, // to avoid non-printable character no 11
      {"ERROR", 5}, // to avoid non-printable character no 12
      {"ERROR", 5}, // to avoid non-printable character no 13
      {"ERROR", 5}, // to avoid non-printable character no 14
      {"ERROR", 5}, // to avoid non-printable character no 15
      {"ERROR", 5}, // to avoid non-printable character no 16
      {"ERROR", 5}, // to avoid non-printable character no 17
      {"ERROR", 5}, // to avoid non-printable character no 18
      {"ERROR", 5}, // to avoid non-printable character no 19
      {"ERROR", 5}, // to avoid non-printable character no 20
      {"ERROR", 5}, // to avoid non-printable character no 21
      {"ERROR", 5}, // to avoid non-printable character no 22
      {"ERROR", 5}, // to avoid non-printable character no 23
      {"ERROR", 5}, // to avoid non-printable character no 24
      {"ERROR", 5}, // to avoid non-printable character no 25
      {"ERROR", 5}, // to avoid non-printable character no 26
      {"ERROR", 5}, // to avoid non-printable character no 27
      {"ERROR", 5}, // to avoid non-printable character no 28
      {"ERROR", 5}, // to avoid non-printable character no 29
      {"ERROR", 5}, // to avoid non-printable character no 30
      {"ERROR", 5}, // to avoid non-printable character no 31
      {"ERROR", 5}, // to avoid the space character
      {R"(C(=O))", 5},
      {R"(c0ccc)", 5},
      {R"(#)", 1},
      {R"(CC)", 2},
      {R"(c0)", 2},
      {R"((C)", 2},
      {R"(cc)", 2},
      {R"(()", 1},
      {R"())", 1},
      {R"(0))", 2},
      {R"(+)", 1},
      {R"(S(=O)(=O))", 9},
      {R"(-)", 1},
      {R"((C))", 3},
      {R"(/)", 1},
      {R"(0)", 1},
      {R"(1)", 1},
      {R"(2)", 1},
      {R"(3)", 1},
      {R"(4)", 1},
      {R"(5)", 1},
      {R"(6)", 1},
      {R"(c1)", 2},
      {R"(0CC)", 3},
      {R"(c()", 2},
      {R"([C@@H])", 6},
      {R"(cc0)", 3},
      {R"([nH])", 4},
      {R"(=)", 1},
      {R"(O))", 2},
      {R"([C@H])", 5},
      {R"(@)", 1},
      {R"((CC)", 3},
      {R"(B)", 1},
      {R"(C)", 1},
      {R"((F))", 3},
      {R"(C0)", 2},
      {R"(F)", 1},
      {R"(C(=O)N)", 6},
      {R"(cn)", 2},
      {R"(I)", 1},
      {R"(c2)", 2},
      {R"(CN)", 2},
      {R"(c0ccccc0)", 8},
      {R"(C()", 2},
      {R"(N)", 1},
      {R"(O)", 1},
      {R"(P)", 1},
      {R"(c0n)", 3},
      {R"(c0ccc(cc0))", 10},
      {R"(S)", 1},
      {R"(C0CC)", 4},
      {R"(c1cc)", 4},
      {R"(c(n0))", 5},
      {R"(C1)", 2},
      {R"(C(C)(C))", 7},
      {R"(CO)", 2},
      {R"(Z)", 1},
      {R"([)", 1},
      {R"(\)", 1},
      {R"(])", 1},
      {R"(C))", 2},
      {R"([N+](=O)[O-])", 12},
      {R"(CC0)", 3},
      {R"(c0cc)", 4},
      {R"(NC(=O))", 6},
      {R"(c)", 1},
      {R"(n0)", 2},
      {R"(c2ccccc12)", 9},
      {R"(=C)", 2},
      {R"(c0))", 3},
      {R"((Cl))", 4},
      {R"(i)", 1},
      {R"(CC0))", 4},
      {R"(n1)", 2},
      {R"(l)", 1},
      {R"(N0CC)", 4},
      {R"(n)", 1},
      {R"(o)", 1},
      {R"(2))", 2},
      {R"((C0))", 4},
      {R"(r)", 1},
      {R"(s)", 1},
      {R"(nn)", 2},
      {R"(C0))", 3},
      {R"(c0cn)", 4},
      {R"((O))", 3},
      {R"(=O))", 3},
      {R"(OCC)", 3},
      {R"(c3ccccc23))", 10},
      {R"(c0ccccc0))", 9},
      {R"(N))", 2},
      {R"(cc()", 3},
      {R"(C(F)(F))", 7},
      {R"(c(C)", 3},
      {R"(c(C))", 4},
      {R"((CC0))", 5},
      {R"(CCN)", 3},
      {R"(c0o)", 3},
      {R"(C(C)", 3},
      {R"(C(=O)O)", 6},
      {R"(nc0)", 3},
      {R"(C(=C)", 4},
      {R"(C=C)", 3},
      {R"(s0))", 3},
      {R"(CC1)", 3},
      {R"(Br))", 3},
      {R"(cc1)", 3},
      {R"(c1n)", 3},
      {R"(c0nc(n[nH]0))", 12},
      {R"(c0cccc(c0))", 10},
      {R"(c0cs)", 4},
      {R"(c2cc)", 4},
      {R"(OC)", 2},
      {R"(CC(C))", 5},
      {R"(CC()", 3},
      {R"(cn0))", 4},
      {R"(c0ccc()", 6},
      {R"(c3)", 2},
      {R"(CC0CC)", 5},
      {R"(cc0))", 4},
      {R"(ccc0)", 4},
      {R"(C2)", 2},
      {R"(c0cc()", 5},
      {R"(C(=O)O))", 7},
      {R"(c1ccc()", 6},
      {R"(C(=O)N0CC)", 9},
      {R"(nc()", 3},
      {R"(CCO)", 3},
      {R"(C(C))", 4},
      {R"(c0onc(n0))", 9},
      {R"(C(O))", 4},
      {R"(c0ncc)", 5},
      {R"(CN(C)", 4},
      {R"(1))", 2},
      {R"(c0noc(n0))", 9},
      {R"(CS)", 2},
      {R"(CCC0)", 4},
      {R"(Cl))", 3},
      {R"(CC(C)(C)O)", 9},
      {R"(1CC)", 3},
      {R"(F))", 2},
      {R"(C(=O)OC(C)(C)C)", 14},
      {R"(NC)", 2},
      {R"(c0ccn)", 5},
      {R"(C0(CC)", 5},
      {R"(CC(C)", 4},
      {R"(n0))", 3},
      {R"(c1))", 3},
      {R"(3))", 2},
      {R"(=N)", 2},
      {R"(CN(CC)", 5},
      {R"(N(C)", 3},
      {R"(CCC)", 3},
      {R"([O-][N+](=O))", 12},
      {R"(c0n[nH]c(n0))", 12},
      {R"(N(CC0))", 6},
      {R"(C1=O)", 4},
      {R"(N(C))", 4},
      {R"(0C)", 2},
      {R"(c1cn)", 4},
      {R"(OCC1c0ccccc0)", 12},
      {R"(n0nn)", 4},
      {R"([C@@])", 5},
      {R"(c4ccccc34))", 10},
      {R"(\C=C\)", 5},
      {R"(c(Cl))", 5},
      {R"(C(N)", 3},
      {R"(C(=O)C)", 6},
      {R"(CCC0))", 5},
      {R"(CCCC)", 4},
      {R"(C#N))", 4},
      {R"(C(=S))", 5},
      {R"(c0ccsc0)", 7},
      {R"(CN(C0))", 6},
      {R"(Cc1cc)", 5},
      {R"(c0cccnc0)", 8},
      {R"(c0nnnn0C)", 8},
      {R"(OC(=O))", 6},
      {R"(c12))", 4},
      {R"(n1))", 3},
      {R"(nn0))", 4},
      {R"(CN0)", 3},
      {R"(s0)", 2},
      {R"(cc2)", 3},
      {R"(C0=)", 3},
      {R"(C0CC0))", 6},
      {R"(c0nc()", 5},
      {R"((CC0CC)", 6},
      {R"(c0occc0))", 8},
      {R"(N1)", 2},
      {R"(c0ccc(F)cc0)", 11},
      {R"(c2))", 3},
      {R"(c0s)", 3},
      {R"(C[C@H])", 6},
      {R"(CN0CC)", 5},
      {R"(C[C@@H])", 7},
      {R"(c(N)", 3},
      {R"(C0=O))", 5},
      {R"(OCC0))", 5},
      {R"((CC0)", 4},
      {R"(cn0)", 3},
      {R"(c12)", 3},
      {R"(Cl)", 2},
      {R"((N)", 2},
      {R"(O=C()", 4},
      {R"([C@])", 4},
      {R"(c1ccc0)", 6},
      {R"(N(C(=O))", 7},
      {R"(c(O))", 4},
      {R"(c0cnn)", 5},
      {R"(c(F))", 4},
      {R"(c1o)", 3},
      {R"(c1cccc()", 7},
      {R"(n0cc)", 4},
      {R"(C0CC0)", 5},
      {R"(c0ccc(Cl))", 9},
      {R"(C(CC0))", 6},
      {R"(N0)", 2},
      {R"(CC(=O)N)", 7},
      {R"(c2ccccc12))", 10},
      {R"(c0co)", 4},
      {R"(c[nH])", 5},
  }};

  dictionary_tree_type build_current_smiles_dictionary(void) {
    dictionary_tree_type dictionary;
    auto& g                       = dictionary.graph;
    const auto v0                 = boost::add_vertex(g);
    g[v0].index                   = 0;
    g[v0].with_output             = false;
    const auto v1                 = boost::add_vertex(g);
    g[v1].index                   = 67;
    g[v1].with_output             = true;
    const auto v2                 = boost::add_vertex(g);
    g[v2].index                   = 77;
    g[v2].with_output             = true;
    const auto v3                 = boost::add_vertex(g);
    g[v3].index                   = 0;
    g[v3].with_output             = false;
    const auto v4                 = boost::add_vertex(g);
    g[v4].index                   = 0;
    g[v4].with_output             = false;
    const auto v5                 = boost::add_vertex(g);
    g[v5].index                   = 33;
    g[v5].with_output             = true;
    const auto v6                 = boost::add_vertex(g);
    g[v6].index                   = 99;
    g[v6].with_output             = true;
    const auto v7                 = boost::add_vertex(g);
    g[v7].index                   = 37;
    g[v7].with_output             = true;
    const auto v8                 = boost::add_vertex(g);
    g[v8].index                   = 0;
    g[v8].with_output             = false;
    const auto v9                 = boost::add_vertex(g);
    g[v9].index                   = 97;
    g[v9].with_output             = true;
    const auto v10                = boost::add_vertex(g);
    g[v10].index                  = 34;
    g[v10].with_output            = true;
    const auto v11                = boost::add_vertex(g);
    g[v11].index                  = 35;
    g[v11].with_output            = true;
    const auto v12                = boost::add_vertex(g);
    g[v12].index                  = 36;
    g[v12].with_output            = true;
    const auto v13                = boost::add_vertex(g);
    g[v13].index                  = 40;
    g[v13].with_output            = true;
    const auto v14                = boost::add_vertex(g);
    g[v14].index                  = 38;
    g[v14].with_output            = true;
    const auto v15                = boost::add_vertex(g);
    g[v15].index                  = 39;
    g[v15].with_output            = true;
    const auto v16                = boost::add_vertex(g);
    g[v16].index                  = 41;
    g[v16].with_output            = true;
    const auto v17                = boost::add_vertex(g);
    g[v17].index                  = 48;
    g[v17].with_output            = true;
    const auto v18                = boost::add_vertex(g);
    g[v18].index                  = 42;
    g[v18].with_output            = true;
    const auto v19                = boost::add_vertex(g);
    g[v19].index                  = 43;
    g[v19].with_output            = true;
    const auto v20                = boost::add_vertex(g);
    g[v20].index                  = 83;
    g[v20].with_output            = true;
    const auto v21                = boost::add_vertex(g);
    g[v21].index                  = 0;
    g[v21].with_output            = false;
    const auto v22                = boost::add_vertex(g);
    g[v22].index                  = 0;
    g[v22].with_output            = false;
    const auto v23                = boost::add_vertex(g);
    g[v23].index                  = 0;
    g[v23].with_output            = false;
    const auto v24                = boost::add_vertex(g);
    g[v24].index                  = 0;
    g[v24].with_output            = false;
    const auto v25                = boost::add_vertex(g);
    g[v25].index                  = 0;
    g[v25].with_output            = false;
    const auto v26                = boost::add_vertex(g);
    g[v26].index                  = 0;
    g[v26].with_output            = false;
    const auto v27                = boost::add_vertex(g);
    g[v27].index                  = 0;
    g[v27].with_output            = false;
    const auto v28                = boost::add_vertex(g);
    g[v28].index                  = 44;
    g[v28].with_output            = true;
    const auto v29                = boost::add_vertex(g);
    g[v29].index                  = 45;
    g[v29].with_output            = true;
    const auto v30                = boost::add_vertex(g);
    g[v30].index                  = 46;
    g[v30].with_output            = true;
    const auto v31                = boost::add_vertex(g);
    g[v31].index                  = 47;
    g[v31].with_output            = true;
    const auto v32                = boost::add_vertex(g);
    g[v32].index                  = 49;
    g[v32].with_output            = true;
    const auto v33                = boost::add_vertex(g);
    g[v33].index                  = 50;
    g[v33].with_output            = true;
    const auto v34                = boost::add_vertex(g);
    g[v34].index                  = 51;
    g[v34].with_output            = true;
    const auto v35                = boost::add_vertex(g);
    g[v35].index                  = 52;
    g[v35].with_output            = true;
    const auto v36                = boost::add_vertex(g);
    g[v36].index                  = 53;
    g[v36].with_output            = true;
    const auto v37                = boost::add_vertex(g);
    g[v37].index                  = 54;
    g[v37].with_output            = true;
    const auto v38                = boost::add_vertex(g);
    g[v38].index                  = 55;
    g[v38].with_output            = true;
    const auto v39                = boost::add_vertex(g);
    g[v39].index                  = 192;
    g[v39].with_output            = true;
    const auto v40                = boost::add_vertex(g);
    g[v40].index                  = 56;
    g[v40].with_output            = true;
    const auto v41                = boost::add_vertex(g);
    g[v41].index                  = 57;
    g[v41].with_output            = true;
    const auto v42                = boost::add_vertex(g);
    g[v42].index                  = 91;
    g[v42].with_output            = true;
    const auto v43                = boost::add_vertex(g);
    g[v43].index                  = 0;
    g[v43].with_output            = false;
    const auto v44                = boost::add_vertex(g);
    g[v44].index                  = 0;
    g[v44].with_output            = false;
    const auto v45                = boost::add_vertex(g);
    g[v45].index                  = 0;
    g[v45].with_output            = false;
    const auto v46                = boost::add_vertex(g);
    g[v46].index                  = 0;
    g[v46].with_output            = false;
    const auto v47                = boost::add_vertex(g);
    g[v47].index                  = 58;
    g[v47].with_output            = true;
    const auto v48                = boost::add_vertex(g);
    g[v48].index                  = 59;
    g[v48].with_output            = true;
    const auto v49                = boost::add_vertex(g);
    g[v49].index                  = 0;
    g[v49].with_output            = false;
    const auto v50                = boost::add_vertex(g);
    g[v50].index                  = 0;
    g[v50].with_output            = false;
    const auto v51                = boost::add_vertex(g);
    g[v51].index                  = 60;
    g[v51].with_output            = true;
    const auto v52                = boost::add_vertex(g);
    g[v52].index                  = 61;
    g[v52].with_output            = true;
    const auto v53                = boost::add_vertex(g);
    g[v53].index                  = 79;
    g[v53].with_output            = true;
    const auto v54                = boost::add_vertex(g);
    g[v54].index                  = 62;
    g[v54].with_output            = true;
    const auto v55                = boost::add_vertex(g);
    g[v55].index                  = 0;
    g[v55].with_output            = false;
    const auto v56                = boost::add_vertex(g);
    g[v56].index                  = 63;
    g[v56].with_output            = true;
    const auto v57                = boost::add_vertex(g);
    g[v57].index                  = 64;
    g[v57].with_output            = true;
    const auto v58                = boost::add_vertex(g);
    g[v58].index                  = 65;
    g[v58].with_output            = true;
    const auto v59                = boost::add_vertex(g);
    g[v59].index                  = 66;
    g[v59].with_output            = true;
    const auto v60                = boost::add_vertex(g);
    g[v60].index                  = 0;
    g[v60].with_output            = false;
    const auto v61                = boost::add_vertex(g);
    g[v61].index                  = 68;
    g[v61].with_output            = true;
    const auto v62                = boost::add_vertex(g);
    g[v62].index                  = 69;
    g[v62].with_output            = true;
    const auto v63                = boost::add_vertex(g);
    g[v63].index                  = 70;
    g[v63].with_output            = true;
    const auto v64                = boost::add_vertex(g);
    g[v64].index                  = 71;
    g[v64].with_output            = true;
    const auto v65                = boost::add_vertex(g);
    g[v65].index                  = 72;
    g[v65].with_output            = true;
    const auto v66                = boost::add_vertex(g);
    g[v66].index                  = 73;
    g[v66].with_output            = true;
    const auto v67                = boost::add_vertex(g);
    g[v67].index                  = 74;
    g[v67].with_output            = true;
    const auto v68                = boost::add_vertex(g);
    g[v68].index                  = 75;
    g[v68].with_output            = true;
    const auto v69                = boost::add_vertex(g);
    g[v69].index                  = 0;
    g[v69].with_output            = false;
    const auto v70                = boost::add_vertex(g);
    g[v70].index                  = 0;
    g[v70].with_output            = false;
    const auto v71                = boost::add_vertex(g);
    g[v71].index                  = 76;
    g[v71].with_output            = true;
    const auto v72                = boost::add_vertex(g);
    g[v72].index                  = 78;
    g[v72].with_output            = true;
    const auto v73                = boost::add_vertex(g);
    g[v73].index                  = 80;
    g[v73].with_output            = true;
    const auto v74                = boost::add_vertex(g);
    g[v74].index                  = 81;
    g[v74].with_output            = true;
    const auto v75                = boost::add_vertex(g);
    g[v75].index                  = 150;
    g[v75].with_output            = true;
    const auto v76                = boost::add_vertex(g);
    g[v76].index                  = 0;
    g[v76].with_output            = false;
    const auto v77                = boost::add_vertex(g);
    g[v77].index                  = 0;
    g[v77].with_output            = false;
    const auto v78                = boost::add_vertex(g);
    g[v78].index                  = 0;
    g[v78].with_output            = false;
    const auto v79                = boost::add_vertex(g);
    g[v79].index                  = 82;
    g[v79].with_output            = true;
    const auto v80                = boost::add_vertex(g);
    g[v80].index                  = 0;
    g[v80].with_output            = false;
    const auto v81                = boost::add_vertex(g);
    g[v81].index                  = 84;
    g[v81].with_output            = true;
    const auto v82                = boost::add_vertex(g);
    g[v82].index                  = 0;
    g[v82].with_output            = false;
    const auto v83                = boost::add_vertex(g);
    g[v83].index                  = 85;
    g[v83].with_output            = true;
    const auto v84                = boost::add_vertex(g);
    g[v84].index                  = 0;
    g[v84].with_output            = false;
    const auto v85                = boost::add_vertex(g);
    g[v85].index                  = 0;
    g[v85].with_output            = false;
    const auto v86                = boost::add_vertex(g);
    g[v86].index                  = 86;
    g[v86].with_output            = true;
    const auto v87                = boost::add_vertex(g);
    g[v87].index                  = 87;
    g[v87].with_output            = true;
    const auto v88                = boost::add_vertex(g);
    g[v88].index                  = 132;
    g[v88].with_output            = true;
    const auto v89                = boost::add_vertex(g);
    g[v89].index                  = 162;
    g[v89].with_output            = true;
    const auto v90                = boost::add_vertex(g);
    g[v90].index                  = 0;
    g[v90].with_output            = false;
    const auto v91                = boost::add_vertex(g);
    g[v91].index                  = 0;
    g[v91].with_output            = false;
    const auto v92                = boost::add_vertex(g);
    g[v92].index                  = 88;
    g[v92].with_output            = true;
    const auto v93                = boost::add_vertex(g);
    g[v93].index                  = 89;
    g[v93].with_output            = true;
    const auto v94                = boost::add_vertex(g);
    g[v94].index                  = 90;
    g[v94].with_output            = true;
    const auto v95                = boost::add_vertex(g);
    g[v95].index                  = 92;
    g[v95].with_output            = true;
    const auto v96                = boost::add_vertex(g);
    g[v96].index                  = 93;
    g[v96].with_output            = true;
    const auto v97                = boost::add_vertex(g);
    g[v97].index                  = 94;
    g[v97].with_output            = true;
    const auto v98                = boost::add_vertex(g);
    g[v98].index                  = 0;
    g[v98].with_output            = false;
    const auto v99                = boost::add_vertex(g);
    g[v99].index                  = 0;
    g[v99].with_output            = false;
    const auto v100               = boost::add_vertex(g);
    g[v100].index                 = 0;
    g[v100].with_output           = false;
    const auto v101               = boost::add_vertex(g);
    g[v101].index                 = 0;
    g[v101].with_output           = false;
    const auto v102               = boost::add_vertex(g);
    g[v102].index                 = 0;
    g[v102].with_output           = false;
    const auto v103               = boost::add_vertex(g);
    g[v103].index                 = 0;
    g[v103].with_output           = false;
    const auto v104               = boost::add_vertex(g);
    g[v104].index                 = 0;
    g[v104].with_output           = false;
    const auto v105               = boost::add_vertex(g);
    g[v105].index                 = 0;
    g[v105].with_output           = false;
    const auto v106               = boost::add_vertex(g);
    g[v106].index                 = 0;
    g[v106].with_output           = false;
    const auto v107               = boost::add_vertex(g);
    g[v107].index                 = 0;
    g[v107].with_output           = false;
    const auto v108               = boost::add_vertex(g);
    g[v108].index                 = 95;
    g[v108].with_output           = true;
    const auto v109               = boost::add_vertex(g);
    g[v109].index                 = 96;
    g[v109].with_output           = true;
    const auto v110               = boost::add_vertex(g);
    g[v110].index                 = 176;
    g[v110].with_output           = true;
    const auto v111               = boost::add_vertex(g);
    g[v111].index                 = 0;
    g[v111].with_output           = false;
    const auto v112               = boost::add_vertex(g);
    g[v112].index                 = 0;
    g[v112].with_output           = false;
    const auto v113               = boost::add_vertex(g);
    g[v113].index                 = 0;
    g[v113].with_output           = false;
    const auto v114               = boost::add_vertex(g);
    g[v114].index                 = 98;
    g[v114].with_output           = true;
    const auto v115               = boost::add_vertex(g);
    g[v115].index                 = 110;
    g[v115].with_output           = true;
    const auto v116               = boost::add_vertex(g);
    g[v116].index                 = 100;
    g[v116].with_output           = true;
    const auto v117               = boost::add_vertex(g);
    g[v117].index                 = 0;
    g[v117].with_output           = false;
    const auto v118               = boost::add_vertex(g);
    g[v118].index                 = 145;
    g[v118].with_output           = true;
    const auto v119               = boost::add_vertex(g);
    g[v119].index                 = 0;
    g[v119].with_output           = false;
    const auto v120               = boost::add_vertex(g);
    g[v120].index                 = 0;
    g[v120].with_output           = false;
    const auto v121               = boost::add_vertex(g);
    g[v121].index                 = 0;
    g[v121].with_output           = false;
    const auto v122               = boost::add_vertex(g);
    g[v122].index                 = 0;
    g[v122].with_output           = false;
    const auto v123               = boost::add_vertex(g);
    g[v123].index                 = 101;
    g[v123].with_output           = true;
    const auto v124               = boost::add_vertex(g);
    g[v124].index                 = 102;
    g[v124].with_output           = true;
    const auto v125               = boost::add_vertex(g);
    g[v125].index                 = 103;
    g[v125].with_output           = true;
    const auto v126               = boost::add_vertex(g);
    g[v126].index                 = 0;
    g[v126].with_output           = false;
    const auto v127               = boost::add_vertex(g);
    g[v127].index                 = 104;
    g[v127].with_output           = true;
    const auto v128               = boost::add_vertex(g);
    g[v128].index                 = 105;
    g[v128].with_output           = true;
    const auto v129               = boost::add_vertex(g);
    g[v129].index                 = 106;
    g[v129].with_output           = true;
    const auto v130               = boost::add_vertex(g);
    g[v130].index                 = 107;
    g[v130].with_output           = true;
    const auto v131               = boost::add_vertex(g);
    g[v131].index                 = 108;
    g[v131].with_output           = true;
    const auto v132               = boost::add_vertex(g);
    g[v132].index                 = 251;
    g[v132].with_output           = true;
    const auto v133               = boost::add_vertex(g);
    g[v133].index                 = 0;
    g[v133].with_output           = false;
    const auto v134               = boost::add_vertex(g);
    g[v134].index                 = 109;
    g[v134].with_output           = true;
    const auto v135               = boost::add_vertex(g);
    g[v135].index                 = 111;
    g[v135].with_output           = true;
    const auto v136               = boost::add_vertex(g);
    g[v136].index                 = 112;
    g[v136].with_output           = true;
    const auto v137               = boost::add_vertex(g);
    g[v137].index                 = 0;
    g[v137].with_output           = false;
    const auto v138               = boost::add_vertex(g);
    g[v138].index                 = 113;
    g[v138].with_output           = true;
    const auto v139               = boost::add_vertex(g);
    g[v139].index                 = 114;
    g[v139].with_output           = true;
    const auto v140               = boost::add_vertex(g);
    g[v140].index                 = 115;
    g[v140].with_output           = true;
    const auto v141               = boost::add_vertex(g);
    g[v141].index                 = 116;
    g[v141].with_output           = true;
    const auto v142               = boost::add_vertex(g);
    g[v142].index                 = 117;
    g[v142].with_output           = true;
    const auto v143               = boost::add_vertex(g);
    g[v143].index                 = 118;
    g[v143].with_output           = true;
    const auto v144               = boost::add_vertex(g);
    g[v144].index                 = 0;
    g[v144].with_output           = false;
    const auto v145               = boost::add_vertex(g);
    g[v145].index                 = 119;
    g[v145].with_output           = true;
    const auto v146               = boost::add_vertex(g);
    g[v146].index                 = 0;
    g[v146].with_output           = false;
    const auto v147               = boost::add_vertex(g);
    g[v147].index                 = 120;
    g[v147].with_output           = true;
    const auto v148               = boost::add_vertex(g);
    g[v148].index                 = 146;
    g[v148].with_output           = true;
    const auto v149               = boost::add_vertex(g);
    g[v149].index                 = 121;
    g[v149].with_output           = true;
    const auto v150               = boost::add_vertex(g);
    g[v150].index                 = 151;
    g[v150].with_output           = true;
    const auto v151               = boost::add_vertex(g);
    g[v151].index                 = 0;
    g[v151].with_output           = false;
    const auto v152               = boost::add_vertex(g);
    g[v152].index                 = 0;
    g[v152].with_output           = false;
    const auto v153               = boost::add_vertex(g);
    g[v153].index                 = 0;
    g[v153].with_output           = false;
    const auto v154               = boost::add_vertex(g);
    g[v154].index                 = 0;
    g[v154].with_output           = false;
    const auto v155               = boost::add_vertex(g);
    g[v155].index                 = 0;
    g[v155].with_output           = false;
    const auto v156               = boost::add_vertex(g);
    g[v156].index                 = 0;
    g[v156].with_output           = false;
    const auto v157               = boost::add_vertex(g);
    g[v157].index                 = 0;
    g[v157].with_output           = false;
    const auto v158               = boost::add_vertex(g);
    g[v158].index                 = 122;
    g[v158].with_output           = true;
    const auto v159               = boost::add_vertex(g);
    g[v159].index                 = 123;
    g[v159].with_output           = true;
    const auto v160               = boost::add_vertex(g);
    g[v160].index                 = 124;
    g[v160].with_output           = true;
    const auto v161               = boost::add_vertex(g);
    g[v161].index                 = 125;
    g[v161].with_output           = true;
    const auto v162               = boost::add_vertex(g);
    g[v162].index                 = 0;
    g[v162].with_output           = false;
    const auto v163               = boost::add_vertex(g);
    g[v163].index                 = 0;
    g[v163].with_output           = false;
    const auto v164               = boost::add_vertex(g);
    g[v164].index                 = 0;
    g[v164].with_output           = false;
    const auto v165               = boost::add_vertex(g);
    g[v165].index                 = 0;
    g[v165].with_output           = false;
    const auto v166               = boost::add_vertex(g);
    g[v166].index                 = 126;
    g[v166].with_output           = true;
    const auto v167               = boost::add_vertex(g);
    g[v167].index                 = 127;
    g[v167].with_output           = true;
    const auto v168               = boost::add_vertex(g);
    g[v168].index                 = 128;
    g[v168].with_output           = true;
    const auto v169               = boost::add_vertex(g);
    g[v169].index                 = 233;
    g[v169].with_output           = true;
    const auto v170               = boost::add_vertex(g);
    g[v170].index                 = 129;
    g[v170].with_output           = true;
    const auto v171               = boost::add_vertex(g);
    g[v171].index                 = 130;
    g[v171].with_output           = true;
    const auto v172               = boost::add_vertex(g);
    g[v172].index                 = 131;
    g[v172].with_output           = true;
    const auto v173               = boost::add_vertex(g);
    g[v173].index                 = 133;
    g[v173].with_output           = true;
    const auto v174               = boost::add_vertex(g);
    g[v174].index                 = 0;
    g[v174].with_output           = false;
    const auto v175               = boost::add_vertex(g);
    g[v175].index                 = 134;
    g[v175].with_output           = true;
    const auto v176               = boost::add_vertex(g);
    g[v176].index                 = 135;
    g[v176].with_output           = true;
    const auto v177               = boost::add_vertex(g);
    g[v177].index                 = 0;
    g[v177].with_output           = false;
    const auto v178               = boost::add_vertex(g);
    g[v178].index                 = 136;
    g[v178].with_output           = true;
    const auto v179               = boost::add_vertex(g);
    g[v179].index                 = 216;
    g[v179].with_output           = true;
    const auto v180               = boost::add_vertex(g);
    g[v180].index                 = 137;
    g[v180].with_output           = true;
    const auto v181               = boost::add_vertex(g);
    g[v181].index                 = 138;
    g[v181].with_output           = true;
    const auto v182               = boost::add_vertex(g);
    g[v182].index                 = 0;
    g[v182].with_output           = false;
    const auto v183               = boost::add_vertex(g);
    g[v183].index                 = 139;
    g[v183].with_output           = true;
    const auto v184               = boost::add_vertex(g);
    g[v184].index                 = 140;
    g[v184].with_output           = true;
    const auto v185               = boost::add_vertex(g);
    g[v185].index                 = 141;
    g[v185].with_output           = true;
    const auto v186               = boost::add_vertex(g);
    g[v186].index                 = 0;
    g[v186].with_output           = false;
    const auto v187               = boost::add_vertex(g);
    g[v187].index                 = 220;
    g[v187].with_output           = true;
    const auto v188               = boost::add_vertex(g);
    g[v188].index                 = 0;
    g[v188].with_output           = false;
    const auto v189               = boost::add_vertex(g);
    g[v189].index                 = 0;
    g[v189].with_output           = false;
    const auto v190               = boost::add_vertex(g);
    g[v190].index                 = 0;
    g[v190].with_output           = false;
    const auto v191               = boost::add_vertex(g);
    g[v191].index                 = 0;
    g[v191].with_output           = false;
    const auto v192               = boost::add_vertex(g);
    g[v192].index                 = 0;
    g[v192].with_output           = false;
    const auto v193               = boost::add_vertex(g);
    g[v193].index                 = 0;
    g[v193].with_output           = false;
    const auto v194               = boost::add_vertex(g);
    g[v194].index                 = 142;
    g[v194].with_output           = true;
    const auto v195               = boost::add_vertex(g);
    g[v195].index                 = 0;
    g[v195].with_output           = false;
    const auto v196               = boost::add_vertex(g);
    g[v196].index                 = 0;
    g[v196].with_output           = false;
    const auto v197               = boost::add_vertex(g);
    g[v197].index                 = 0;
    g[v197].with_output           = false;
    const auto v198               = boost::add_vertex(g);
    g[v198].index                 = 143;
    g[v198].with_output           = true;
    const auto v199               = boost::add_vertex(g);
    g[v199].index                 = 144;
    g[v199].with_output           = true;
    const auto v200               = boost::add_vertex(g);
    g[v200].index                 = 148;
    g[v200].with_output           = true;
    const auto v201               = boost::add_vertex(g);
    g[v201].index                 = 179;
    g[v201].with_output           = true;
    const auto v202               = boost::add_vertex(g);
    g[v202].index                 = 147;
    g[v202].with_output           = true;
    const auto v203               = boost::add_vertex(g);
    g[v203].index                 = 234;
    g[v203].with_output           = true;
    const auto v204               = boost::add_vertex(g);
    g[v204].index                 = 149;
    g[v204].with_output           = true;
    const auto v205               = boost::add_vertex(g);
    g[v205].index                 = 0;
    g[v205].with_output           = false;
    const auto v206               = boost::add_vertex(g);
    g[v206].index                 = 152;
    g[v206].with_output           = true;
    const auto v207               = boost::add_vertex(g);
    g[v207].index                 = 153;
    g[v207].with_output           = true;
    const auto v208               = boost::add_vertex(g);
    g[v208].index                 = 0;
    g[v208].with_output           = false;
    const auto v209               = boost::add_vertex(g);
    g[v209].index                 = 154;
    g[v209].with_output           = true;
    const auto v210               = boost::add_vertex(g);
    g[v210].index                 = 155;
    g[v210].with_output           = true;
    const auto v211               = boost::add_vertex(g);
    g[v211].index                 = 156;
    g[v211].with_output           = true;
    const auto v212               = boost::add_vertex(g);
    g[v212].index                 = 157;
    g[v212].with_output           = true;
    const auto v213               = boost::add_vertex(g);
    g[v213].index                 = 0;
    g[v213].with_output           = false;
    const auto v214               = boost::add_vertex(g);
    g[v214].index                 = 158;
    g[v214].with_output           = true;
    const auto v215               = boost::add_vertex(g);
    g[v215].index                 = 0;
    g[v215].with_output           = false;
    const auto v216               = boost::add_vertex(g);
    g[v216].index                 = 0;
    g[v216].with_output           = false;
    const auto v217               = boost::add_vertex(g);
    g[v217].index                 = 159;
    g[v217].with_output           = true;
    const auto v218               = boost::add_vertex(g);
    g[v218].index                 = 160;
    g[v218].with_output           = true;
    const auto v219               = boost::add_vertex(g);
    g[v219].index                 = 161;
    g[v219].with_output           = true;
    const auto v220               = boost::add_vertex(g);
    g[v220].index                 = 0;
    g[v220].with_output           = false;
    const auto v221               = boost::add_vertex(g);
    g[v221].index                 = 0;
    g[v221].with_output           = false;
    const auto v222               = boost::add_vertex(g);
    g[v222].index                 = 0;
    g[v222].with_output           = false;
    const auto v223               = boost::add_vertex(g);
    g[v223].index                 = 0;
    g[v223].with_output           = false;
    const auto v224               = boost::add_vertex(g);
    g[v224].index                 = 0;
    g[v224].with_output           = false;
    const auto v225               = boost::add_vertex(g);
    g[v225].index                 = 163;
    g[v225].with_output           = true;
    const auto v226               = boost::add_vertex(g);
    g[v226].index                 = 0;
    g[v226].with_output           = false;
    const auto v227               = boost::add_vertex(g);
    g[v227].index                 = 164;
    g[v227].with_output           = true;
    const auto v228               = boost::add_vertex(g);
    g[v228].index                 = 165;
    g[v228].with_output           = true;
    const auto v229               = boost::add_vertex(g);
    g[v229].index                 = 0;
    g[v229].with_output           = false;
    const auto v230               = boost::add_vertex(g);
    g[v230].index                 = 166;
    g[v230].with_output           = true;
    const auto v231               = boost::add_vertex(g);
    g[v231].index                 = 167;
    g[v231].with_output           = true;
    const auto v232               = boost::add_vertex(g);
    g[v232].index                 = 0;
    g[v232].with_output           = false;
    const auto v233               = boost::add_vertex(g);
    g[v233].index                 = 0;
    g[v233].with_output           = false;
    const auto v234               = boost::add_vertex(g);
    g[v234].index                 = 0;
    g[v234].with_output           = false;
    const auto v235               = boost::add_vertex(g);
    g[v235].index                 = 0;
    g[v235].with_output           = false;
    const auto v236               = boost::add_vertex(g);
    g[v236].index                 = 0;
    g[v236].with_output           = false;
    const auto v237               = boost::add_vertex(g);
    g[v237].index                 = 168;
    g[v237].with_output           = true;
    const auto v238               = boost::add_vertex(g);
    g[v238].index                 = 169;
    g[v238].with_output           = true;
    const auto v239               = boost::add_vertex(g);
    g[v239].index                 = 186;
    g[v239].with_output           = true;
    const auto v240               = boost::add_vertex(g);
    g[v240].index                 = 170;
    g[v240].with_output           = true;
    const auto v241               = boost::add_vertex(g);
    g[v241].index                 = 236;
    g[v241].with_output           = true;
    const auto v242               = boost::add_vertex(g);
    g[v242].index                 = 171;
    g[v242].with_output           = true;
    const auto v243               = boost::add_vertex(g);
    g[v243].index                 = 0;
    g[v243].with_output           = false;
    const auto v244               = boost::add_vertex(g);
    g[v244].index                 = 0;
    g[v244].with_output           = false;
    const auto v245               = boost::add_vertex(g);
    g[v245].index                 = 0;
    g[v245].with_output           = false;
    const auto v246               = boost::add_vertex(g);
    g[v246].index                 = 172;
    g[v246].with_output           = true;
    const auto v247               = boost::add_vertex(g);
    g[v247].index                 = 0;
    g[v247].with_output           = false;
    const auto v248               = boost::add_vertex(g);
    g[v248].index                 = 173;
    g[v248].with_output           = true;
    const auto v249               = boost::add_vertex(g);
    g[v249].index                 = 174;
    g[v249].with_output           = true;
    const auto v250               = boost::add_vertex(g);
    g[v250].index                 = 0;
    g[v250].with_output           = false;
    const auto v251               = boost::add_vertex(g);
    g[v251].index                 = 0;
    g[v251].with_output           = false;
    const auto v252               = boost::add_vertex(g);
    g[v252].index                 = 0;
    g[v252].with_output           = false;
    const auto v253               = boost::add_vertex(g);
    g[v253].index                 = 0;
    g[v253].with_output           = false;
    const auto v254               = boost::add_vertex(g);
    g[v254].index                 = 0;
    g[v254].with_output           = false;
    const auto v255               = boost::add_vertex(g);
    g[v255].index                 = 0;
    g[v255].with_output           = false;
    const auto v256               = boost::add_vertex(g);
    g[v256].index                 = 0;
    g[v256].with_output           = false;
    const auto v257               = boost::add_vertex(g);
    g[v257].index                 = 175;
    g[v257].with_output           = true;
    const auto v258               = boost::add_vertex(g);
    g[v258].index                 = 177;
    g[v258].with_output           = true;
    const auto v259               = boost::add_vertex(g);
    g[v259].index                 = 0;
    g[v259].with_output           = false;
    const auto v260               = boost::add_vertex(g);
    g[v260].index                 = 0;
    g[v260].with_output           = false;
    const auto v261               = boost::add_vertex(g);
    g[v261].index                 = 178;
    g[v261].with_output           = true;
    const auto v262               = boost::add_vertex(g);
    g[v262].index                 = 180;
    g[v262].with_output           = true;
    const auto v263               = boost::add_vertex(g);
    g[v263].index                 = 181;
    g[v263].with_output           = true;
    const auto v264               = boost::add_vertex(g);
    g[v264].index                 = 182;
    g[v264].with_output           = true;
    const auto v265               = boost::add_vertex(g);
    g[v265].index                 = 183;
    g[v265].with_output           = true;
    const auto v266               = boost::add_vertex(g);
    g[v266].index                 = 184;
    g[v266].with_output           = true;
    const auto v267               = boost::add_vertex(g);
    g[v267].index                 = 0;
    g[v267].with_output           = false;
    const auto v268               = boost::add_vertex(g);
    g[v268].index                 = 185;
    g[v268].with_output           = true;
    const auto v269               = boost::add_vertex(g);
    g[v269].index                 = 0;
    g[v269].with_output           = false;
    const auto v270               = boost::add_vertex(g);
    g[v270].index                 = 0;
    g[v270].with_output           = false;
    const auto v271               = boost::add_vertex(g);
    g[v271].index                 = 0;
    g[v271].with_output           = false;
    const auto v272               = boost::add_vertex(g);
    g[v272].index                 = 0;
    g[v272].with_output           = false;
    const auto v273               = boost::add_vertex(g);
    g[v273].index                 = 0;
    g[v273].with_output           = false;
    const auto v274               = boost::add_vertex(g);
    g[v274].index                 = 0;
    g[v274].with_output           = false;
    const auto v275               = boost::add_vertex(g);
    g[v275].index                 = 0;
    g[v275].with_output           = false;
    const auto v276               = boost::add_vertex(g);
    g[v276].index                 = 0;
    g[v276].with_output           = false;
    const auto v277               = boost::add_vertex(g);
    g[v277].index                 = 0;
    g[v277].with_output           = false;
    const auto v278               = boost::add_vertex(g);
    g[v278].index                 = 0;
    g[v278].with_output           = false;
    const auto v279               = boost::add_vertex(g);
    g[v279].index                 = 187;
    g[v279].with_output           = true;
    const auto v280               = boost::add_vertex(g);
    g[v280].index                 = 0;
    g[v280].with_output           = false;
    const auto v281               = boost::add_vertex(g);
    g[v281].index                 = 0;
    g[v281].with_output           = false;
    const auto v282               = boost::add_vertex(g);
    g[v282].index                 = 0;
    g[v282].with_output           = false;
    const auto v283               = boost::add_vertex(g);
    g[v283].index                 = 0;
    g[v283].with_output           = false;
    const auto v284               = boost::add_vertex(g);
    g[v284].index                 = 0;
    g[v284].with_output           = false;
    const auto v285               = boost::add_vertex(g);
    g[v285].index                 = 0;
    g[v285].with_output           = false;
    const auto v286               = boost::add_vertex(g);
    g[v286].index                 = 0;
    g[v286].with_output           = false;
    const auto v287               = boost::add_vertex(g);
    g[v287].index                 = 0;
    g[v287].with_output           = false;
    const auto v288               = boost::add_vertex(g);
    g[v288].index                 = 188;
    g[v288].with_output           = true;
    const auto v289               = boost::add_vertex(g);
    g[v289].index                 = 0;
    g[v289].with_output           = false;
    const auto v290               = boost::add_vertex(g);
    g[v290].index                 = 0;
    g[v290].with_output           = false;
    const auto v291               = boost::add_vertex(g);
    g[v291].index                 = 189;
    g[v291].with_output           = true;
    const auto v292               = boost::add_vertex(g);
    g[v292].index                 = 0;
    g[v292].with_output           = false;
    const auto v293               = boost::add_vertex(g);
    g[v293].index                 = 190;
    g[v293].with_output           = true;
    const auto v294               = boost::add_vertex(g);
    g[v294].index                 = 191;
    g[v294].with_output           = true;
    const auto v295               = boost::add_vertex(g);
    g[v295].index                 = 193;
    g[v295].with_output           = true;
    const auto v296               = boost::add_vertex(g);
    g[v296].index                 = 0;
    g[v296].with_output           = false;
    const auto v297               = boost::add_vertex(g);
    g[v297].index                 = 0;
    g[v297].with_output           = false;
    const auto v298               = boost::add_vertex(g);
    g[v298].index                 = 0;
    g[v298].with_output           = false;
    const auto v299               = boost::add_vertex(g);
    g[v299].index                 = 0;
    g[v299].with_output           = false;
    const auto v300               = boost::add_vertex(g);
    g[v300].index                 = 0;
    g[v300].with_output           = false;
    const auto v301               = boost::add_vertex(g);
    g[v301].index                 = 0;
    g[v301].with_output           = false;
    const auto v302               = boost::add_vertex(g);
    g[v302].index                 = 0;
    g[v302].with_output           = false;
    const auto v303               = boost::add_vertex(g);
    g[v303].index                 = 0;
    g[v303].with_output           = false;
    const auto v304               = boost::add_vertex(g);
    g[v304].index                 = 194;
    g[v304].with_output           = true;
    const auto v305               = boost::add_vertex(g);
    g[v305].index                 = 0;
    g[v305].with_output           = false;
    const auto v306               = boost::add_vertex(g);
    g[v306].index                 = 195;
    g[v306].with_output           = true;
    const auto v307               = boost::add_vertex(g);
    g[v307].index                 = 196;
    g[v307].with_output           = true;
    const auto v308               = boost::add_vertex(g);
    g[v308].index                 = 0;
    g[v308].with_output           = false;
    const auto v309               = boost::add_vertex(g);
    g[v309].index                 = 0;
    g[v309].with_output           = false;
    const auto v310               = boost::add_vertex(g);
    g[v310].index                 = 0;
    g[v310].with_output           = false;
    const auto v311               = boost::add_vertex(g);
    g[v311].index                 = 0;
    g[v311].with_output           = false;
    const auto v312               = boost::add_vertex(g);
    g[v312].index                 = 0;
    g[v312].with_output           = false;
    const auto v313               = boost::add_vertex(g);
    g[v313].index                 = 0;
    g[v313].with_output           = false;
    const auto v314               = boost::add_vertex(g);
    g[v314].index                 = 0;
    g[v314].with_output           = false;
    const auto v315               = boost::add_vertex(g);
    g[v315].index                 = 0;
    g[v315].with_output           = false;
    const auto v316               = boost::add_vertex(g);
    g[v316].index                 = 197;
    g[v316].with_output           = true;
    const auto v317               = boost::add_vertex(g);
    g[v317].index                 = 0;
    g[v317].with_output           = false;
    const auto v318               = boost::add_vertex(g);
    g[v318].index                 = 0;
    g[v318].with_output           = false;
    const auto v319               = boost::add_vertex(g);
    g[v319].index                 = 0;
    g[v319].with_output           = false;
    const auto v320               = boost::add_vertex(g);
    g[v320].index                 = 198;
    g[v320].with_output           = true;
    const auto v321               = boost::add_vertex(g);
    g[v321].index                 = 0;
    g[v321].with_output           = false;
    const auto v322               = boost::add_vertex(g);
    g[v322].index                 = 199;
    g[v322].with_output           = true;
    const auto v323               = boost::add_vertex(g);
    g[v323].index                 = 200;
    g[v323].with_output           = true;
    const auto v324               = boost::add_vertex(g);
    g[v324].index                 = 201;
    g[v324].with_output           = true;
    const auto v325               = boost::add_vertex(g);
    g[v325].index                 = 202;
    g[v325].with_output           = true;
    const auto v326               = boost::add_vertex(g);
    g[v326].index                 = 203;
    g[v326].with_output           = true;
    const auto v327               = boost::add_vertex(g);
    g[v327].index                 = 0;
    g[v327].with_output           = false;
    const auto v328               = boost::add_vertex(g);
    g[v328].index                 = 0;
    g[v328].with_output           = false;
    const auto v329               = boost::add_vertex(g);
    g[v329].index                 = 204;
    g[v329].with_output           = true;
    const auto v330               = boost::add_vertex(g);
    g[v330].index                 = 0;
    g[v330].with_output           = false;
    const auto v331               = boost::add_vertex(g);
    g[v331].index                 = 205;
    g[v331].with_output           = true;
    const auto v332               = boost::add_vertex(g);
    g[v332].index                 = 0;
    g[v332].with_output           = false;
    const auto v333               = boost::add_vertex(g);
    g[v333].index                 = 0;
    g[v333].with_output           = false;
    const auto v334               = boost::add_vertex(g);
    g[v334].index                 = 206;
    g[v334].with_output           = true;
    const auto v335               = boost::add_vertex(g);
    g[v335].index                 = 0;
    g[v335].with_output           = false;
    const auto v336               = boost::add_vertex(g);
    g[v336].index                 = 207;
    g[v336].with_output           = true;
    const auto v337               = boost::add_vertex(g);
    g[v337].index                 = 0;
    g[v337].with_output           = false;
    const auto v338               = boost::add_vertex(g);
    g[v338].index                 = 0;
    g[v338].with_output           = false;
    const auto v339               = boost::add_vertex(g);
    g[v339].index                 = 0;
    g[v339].with_output           = false;
    const auto v340               = boost::add_vertex(g);
    g[v340].index                 = 208;
    g[v340].with_output           = true;
    const auto v341               = boost::add_vertex(g);
    g[v341].index                 = 0;
    g[v341].with_output           = false;
    const auto v342               = boost::add_vertex(g);
    g[v342].index                 = 0;
    g[v342].with_output           = false;
    const auto v343               = boost::add_vertex(g);
    g[v343].index                 = 209;
    g[v343].with_output           = true;
    const auto v344               = boost::add_vertex(g);
    g[v344].index                 = 0;
    g[v344].with_output           = false;
    const auto v345               = boost::add_vertex(g);
    g[v345].index                 = 0;
    g[v345].with_output           = false;
    const auto v346               = boost::add_vertex(g);
    g[v346].index                 = 0;
    g[v346].with_output           = false;
    const auto v347               = boost::add_vertex(g);
    g[v347].index                 = 0;
    g[v347].with_output           = false;
    const auto v348               = boost::add_vertex(g);
    g[v348].index                 = 210;
    g[v348].with_output           = true;
    const auto v349               = boost::add_vertex(g);
    g[v349].index                 = 0;
    g[v349].with_output           = false;
    const auto v350               = boost::add_vertex(g);
    g[v350].index                 = 0;
    g[v350].with_output           = false;
    const auto v351               = boost::add_vertex(g);
    g[v351].index                 = 0;
    g[v351].with_output           = false;
    const auto v352               = boost::add_vertex(g);
    g[v352].index                 = 211;
    g[v352].with_output           = true;
    const auto v353               = boost::add_vertex(g);
    g[v353].index                 = 235;
    g[v353].with_output           = true;
    const auto v354               = boost::add_vertex(g);
    g[v354].index                 = 212;
    g[v354].with_output           = true;
    const auto v355               = boost::add_vertex(g);
    g[v355].index                 = 213;
    g[v355].with_output           = true;
    const auto v356               = boost::add_vertex(g);
    g[v356].index                 = 0;
    g[v356].with_output           = false;
    const auto v357               = boost::add_vertex(g);
    g[v357].index                 = 214;
    g[v357].with_output           = true;
    const auto v358               = boost::add_vertex(g);
    g[v358].index                 = 215;
    g[v358].with_output           = true;
    const auto v359               = boost::add_vertex(g);
    g[v359].index                 = 217;
    g[v359].with_output           = true;
    const auto v360               = boost::add_vertex(g);
    g[v360].index                 = 218;
    g[v360].with_output           = true;
    const auto v361               = boost::add_vertex(g);
    g[v361].index                 = 248;
    g[v361].with_output           = true;
    const auto v362               = boost::add_vertex(g);
    g[v362].index                 = 219;
    g[v362].with_output           = true;
    const auto v363               = boost::add_vertex(g);
    g[v363].index                 = 0;
    g[v363].with_output           = false;
    const auto v364               = boost::add_vertex(g);
    g[v364].index                 = 221;
    g[v364].with_output           = true;
    const auto v365               = boost::add_vertex(g);
    g[v365].index                 = 0;
    g[v365].with_output           = false;
    const auto v366               = boost::add_vertex(g);
    g[v366].index                 = 0;
    g[v366].with_output           = false;
    const auto v367               = boost::add_vertex(g);
    g[v367].index                 = 0;
    g[v367].with_output           = false;
    const auto v368               = boost::add_vertex(g);
    g[v368].index                 = 0;
    g[v368].with_output           = false;
    const auto v369               = boost::add_vertex(g);
    g[v369].index                 = 222;
    g[v369].with_output           = true;
    const auto v370               = boost::add_vertex(g);
    g[v370].index                 = 223;
    g[v370].with_output           = true;
    const auto v371               = boost::add_vertex(g);
    g[v371].index                 = 0;
    g[v371].with_output           = false;
    const auto v372               = boost::add_vertex(g);
    g[v372].index                 = 0;
    g[v372].with_output           = false;
    const auto v373               = boost::add_vertex(g);
    g[v373].index                 = 0;
    g[v373].with_output           = false;
    const auto v374               = boost::add_vertex(g);
    g[v374].index                 = 0;
    g[v374].with_output           = false;
    const auto v375               = boost::add_vertex(g);
    g[v375].index                 = 224;
    g[v375].with_output           = true;
    const auto v376               = boost::add_vertex(g);
    g[v376].index                 = 225;
    g[v376].with_output           = true;
    const auto v377               = boost::add_vertex(g);
    g[v377].index                 = 226;
    g[v377].with_output           = true;
    const auto v378               = boost::add_vertex(g);
    g[v378].index                 = 0;
    g[v378].with_output           = false;
    const auto v379               = boost::add_vertex(g);
    g[v379].index                 = 0;
    g[v379].with_output           = false;
    const auto v380               = boost::add_vertex(g);
    g[v380].index                 = 0;
    g[v380].with_output           = false;
    const auto v381               = boost::add_vertex(g);
    g[v381].index                 = 0;
    g[v381].with_output           = false;
    const auto v382               = boost::add_vertex(g);
    g[v382].index                 = 227;
    g[v382].with_output           = true;
    const auto v383               = boost::add_vertex(g);
    g[v383].index                 = 0;
    g[v383].with_output           = false;
    const auto v384               = boost::add_vertex(g);
    g[v384].index                 = 228;
    g[v384].with_output           = true;
    const auto v385               = boost::add_vertex(g);
    g[v385].index                 = 0;
    g[v385].with_output           = false;
    const auto v386               = boost::add_vertex(g);
    g[v386].index                 = 0;
    g[v386].with_output           = false;
    const auto v387               = boost::add_vertex(g);
    g[v387].index                 = 229;
    g[v387].with_output           = true;
    const auto v388               = boost::add_vertex(g);
    g[v388].index                 = 230;
    g[v388].with_output           = true;
    const auto v389               = boost::add_vertex(g);
    g[v389].index                 = 0;
    g[v389].with_output           = false;
    const auto v390               = boost::add_vertex(g);
    g[v390].index                 = 231;
    g[v390].with_output           = true;
    const auto v391               = boost::add_vertex(g);
    g[v391].index                 = 0;
    g[v391].with_output           = false;
    const auto v392               = boost::add_vertex(g);
    g[v392].index                 = 232;
    g[v392].with_output           = true;
    const auto v393               = boost::add_vertex(g);
    g[v393].index                 = 237;
    g[v393].with_output           = true;
    const auto v394               = boost::add_vertex(g);
    g[v394].index                 = 0;
    g[v394].with_output           = false;
    const auto v395               = boost::add_vertex(g);
    g[v395].index                 = 0;
    g[v395].with_output           = false;
    const auto v396               = boost::add_vertex(g);
    g[v396].index                 = 238;
    g[v396].with_output           = true;
    const auto v397               = boost::add_vertex(g);
    g[v397].index                 = 239;
    g[v397].with_output           = true;
    const auto v398               = boost::add_vertex(g);
    g[v398].index                 = 240;
    g[v398].with_output           = true;
    const auto v399               = boost::add_vertex(g);
    g[v399].index                 = 0;
    g[v399].with_output           = false;
    const auto v400               = boost::add_vertex(g);
    g[v400].index                 = 0;
    g[v400].with_output           = false;
    const auto v401               = boost::add_vertex(g);
    g[v401].index                 = 0;
    g[v401].with_output           = false;
    const auto v402               = boost::add_vertex(g);
    g[v402].index                 = 241;
    g[v402].with_output           = true;
    const auto v403               = boost::add_vertex(g);
    g[v403].index                 = 0;
    g[v403].with_output           = false;
    const auto v404               = boost::add_vertex(g);
    g[v404].index                 = 242;
    g[v404].with_output           = true;
    const auto v405               = boost::add_vertex(g);
    g[v405].index                 = 243;
    g[v405].with_output           = true;
    const auto v406               = boost::add_vertex(g);
    g[v406].index                 = 0;
    g[v406].with_output           = false;
    const auto v407               = boost::add_vertex(g);
    g[v407].index                 = 244;
    g[v407].with_output           = true;
    const auto v408               = boost::add_vertex(g);
    g[v408].index                 = 245;
    g[v408].with_output           = true;
    const auto v409               = boost::add_vertex(g);
    g[v409].index                 = 0;
    g[v409].with_output           = false;
    const auto v410               = boost::add_vertex(g);
    g[v410].index                 = 246;
    g[v410].with_output           = true;
    const auto v411               = boost::add_vertex(g);
    g[v411].index                 = 0;
    g[v411].with_output           = false;
    const auto v412               = boost::add_vertex(g);
    g[v412].index                 = 247;
    g[v412].with_output           = true;
    const auto v413               = boost::add_vertex(g);
    g[v413].index                 = 0;
    g[v413].with_output           = false;
    const auto v414               = boost::add_vertex(g);
    g[v414].index                 = 0;
    g[v414].with_output           = false;
    const auto v415               = boost::add_vertex(g);
    g[v415].index                 = 249;
    g[v415].with_output           = true;
    const auto v416               = boost::add_vertex(g);
    g[v416].index                 = 0;
    g[v416].with_output           = false;
    const auto v417               = boost::add_vertex(g);
    g[v417].index                 = 0;
    g[v417].with_output           = false;
    const auto v418               = boost::add_vertex(g);
    g[v418].index                 = 250;
    g[v418].with_output           = true;
    const auto v419               = boost::add_vertex(g);
    g[v419].index                 = 0;
    g[v419].with_output           = false;
    const auto v420               = boost::add_vertex(g);
    g[v420].index                 = 0;
    g[v420].with_output           = false;
    const auto v421               = boost::add_vertex(g);
    g[v421].index                 = 0;
    g[v421].with_output           = false;
    const auto v422               = boost::add_vertex(g);
    g[v422].index                 = 252;
    g[v422].with_output           = true;
    const auto v423               = boost::add_vertex(g);
    g[v423].index                 = 253;
    g[v423].with_output           = true;
    const auto v424               = boost::add_vertex(g);
    g[v424].index                 = 254;
    g[v424].with_output           = true;
    const auto v425               = boost::add_vertex(g);
    g[v425].index                 = 0;
    g[v425].with_output           = false;
    const auto v426               = boost::add_vertex(g);
    g[v426].index                 = 0;
    g[v426].with_output           = false;
    const auto v427               = boost::add_vertex(g);
    g[v427].index                 = 0;
    g[v427].with_output           = false;
    const auto v428               = boost::add_vertex(g);
    g[v428].index                 = 255;
    g[v428].with_output           = true;
    const auto [e0, is_inserted0] = boost::add_edge(v0, v1, g);
    g[e0].character               = 'C';
    assert(is_inserted0);
    const auto [e1, is_inserted1] = boost::add_edge(v1, v2, g);
    g[e1].character               = '(';
    assert(is_inserted1);
    const auto [e2, is_inserted2] = boost::add_edge(v2, v3, g);
    g[e2].character               = '=';
    assert(is_inserted2);
    const auto [e3, is_inserted3] = boost::add_edge(v3, v4, g);
    g[e3].character               = 'O';
    assert(is_inserted3);
    const auto [e4, is_inserted4] = boost::add_edge(v4, v5, g);
    g[e4].character               = ')';
    assert(is_inserted4);
    const auto [e5, is_inserted5] = boost::add_edge(v0, v6, g);
    g[e5].character               = 'c';
    assert(is_inserted5);
    const auto [e6, is_inserted6] = boost::add_edge(v6, v7, g);
    g[e6].character               = '0';
    assert(is_inserted6);
    const auto [e7, is_inserted7] = boost::add_edge(v7, v8, g);
    g[e7].character               = 'c';
    assert(is_inserted7);
    const auto [e8, is_inserted8] = boost::add_edge(v8, v9, g);
    g[e8].character               = 'c';
    assert(is_inserted8);
    const auto [e9, is_inserted9] = boost::add_edge(v9, v10, g);
    g[e9].character               = 'c';
    assert(is_inserted9);
    const auto [e10, is_inserted10] = boost::add_edge(v0, v11, g);
    g[e10].character                = '#';
    assert(is_inserted10);
    const auto [e11, is_inserted11] = boost::add_edge(v1, v12, g);
    g[e11].character                = 'C';
    assert(is_inserted11);
    const auto [e12, is_inserted12] = boost::add_edge(v0, v13, g);
    g[e12].character                = '(';
    assert(is_inserted12);
    const auto [e13, is_inserted13] = boost::add_edge(v13, v14, g);
    g[e13].character                = 'C';
    assert(is_inserted13);
    const auto [e14, is_inserted14] = boost::add_edge(v6, v15, g);
    g[e14].character                = 'c';
    assert(is_inserted14);
    const auto [e15, is_inserted15] = boost::add_edge(v0, v16, g);
    g[e15].character                = ')';
    assert(is_inserted15);
    const auto [e16, is_inserted16] = boost::add_edge(v0, v17, g);
    g[e16].character                = '0';
    assert(is_inserted16);
    const auto [e17, is_inserted17] = boost::add_edge(v17, v18, g);
    g[e17].character                = ')';
    assert(is_inserted17);
    const auto [e18, is_inserted18] = boost::add_edge(v0, v19, g);
    g[e18].character                = '+';
    assert(is_inserted18);
    const auto [e19, is_inserted19] = boost::add_edge(v0, v20, g);
    g[e19].character                = 'S';
    assert(is_inserted19);
    const auto [e20, is_inserted20] = boost::add_edge(v20, v21, g);
    g[e20].character                = '(';
    assert(is_inserted20);
    const auto [e21, is_inserted21] = boost::add_edge(v21, v22, g);
    g[e21].character                = '=';
    assert(is_inserted21);
    const auto [e22, is_inserted22] = boost::add_edge(v22, v23, g);
    g[e22].character                = 'O';
    assert(is_inserted22);
    const auto [e23, is_inserted23] = boost::add_edge(v23, v24, g);
    g[e23].character                = ')';
    assert(is_inserted23);
    const auto [e24, is_inserted24] = boost::add_edge(v24, v25, g);
    g[e24].character                = '(';
    assert(is_inserted24);
    const auto [e25, is_inserted25] = boost::add_edge(v25, v26, g);
    g[e25].character                = '=';
    assert(is_inserted25);
    const auto [e26, is_inserted26] = boost::add_edge(v26, v27, g);
    g[e26].character                = 'O';
    assert(is_inserted26);
    const auto [e27, is_inserted27] = boost::add_edge(v27, v28, g);
    g[e27].character                = ')';
    assert(is_inserted27);
    const auto [e28, is_inserted28] = boost::add_edge(v0, v29, g);
    g[e28].character                = '-';
    assert(is_inserted28);
    const auto [e29, is_inserted29] = boost::add_edge(v14, v30, g);
    g[e29].character                = ')';
    assert(is_inserted29);
    const auto [e30, is_inserted30] = boost::add_edge(v0, v31, g);
    g[e30].character                = '/';
    assert(is_inserted30);
    const auto [e31, is_inserted31] = boost::add_edge(v0, v32, g);
    g[e31].character                = '1';
    assert(is_inserted31);
    const auto [e32, is_inserted32] = boost::add_edge(v0, v33, g);
    g[e32].character                = '2';
    assert(is_inserted32);
    const auto [e33, is_inserted33] = boost::add_edge(v0, v34, g);
    g[e33].character                = '3';
    assert(is_inserted33);
    const auto [e34, is_inserted34] = boost::add_edge(v0, v35, g);
    g[e34].character                = '4';
    assert(is_inserted34);
    const auto [e35, is_inserted35] = boost::add_edge(v0, v36, g);
    g[e35].character                = '5';
    assert(is_inserted35);
    const auto [e36, is_inserted36] = boost::add_edge(v0, v37, g);
    g[e36].character                = '6';
    assert(is_inserted36);
    const auto [e37, is_inserted37] = boost::add_edge(v6, v38, g);
    g[e37].character                = '1';
    assert(is_inserted37);
    const auto [e38, is_inserted38] = boost::add_edge(v17, v39, g);
    g[e38].character                = 'C';
    assert(is_inserted38);
    const auto [e39, is_inserted39] = boost::add_edge(v39, v40, g);
    g[e39].character                = 'C';
    assert(is_inserted39);
    const auto [e40, is_inserted40] = boost::add_edge(v6, v41, g);
    g[e40].character                = '(';
    assert(is_inserted40);
    const auto [e41, is_inserted41] = boost::add_edge(v0, v42, g);
    g[e41].character                = '[';
    assert(is_inserted41);
    const auto [e42, is_inserted42] = boost::add_edge(v42, v43, g);
    g[e42].character                = 'C';
    assert(is_inserted42);
    const auto [e43, is_inserted43] = boost::add_edge(v43, v44, g);
    g[e43].character                = '@';
    assert(is_inserted43);
    const auto [e44, is_inserted44] = boost::add_edge(v44, v45, g);
    g[e44].character                = '@';
    assert(is_inserted44);
    const auto [e45, is_inserted45] = boost::add_edge(v45, v46, g);
    g[e45].character                = 'H';
    assert(is_inserted45);
    const auto [e46, is_inserted46] = boost::add_edge(v46, v47, g);
    g[e46].character                = ']';
    assert(is_inserted46);
    const auto [e47, is_inserted47] = boost::add_edge(v15, v48, g);
    g[e47].character                = '0';
    assert(is_inserted47);
    const auto [e48, is_inserted48] = boost::add_edge(v42, v49, g);
    g[e48].character                = 'n';
    assert(is_inserted48);
    const auto [e49, is_inserted49] = boost::add_edge(v49, v50, g);
    g[e49].character                = 'H';
    assert(is_inserted49);
    const auto [e50, is_inserted50] = boost::add_edge(v50, v51, g);
    g[e50].character                = ']';
    assert(is_inserted50);
    const auto [e51, is_inserted51] = boost::add_edge(v0, v52, g);
    g[e51].character                = '=';
    assert(is_inserted51);
    const auto [e52, is_inserted52] = boost::add_edge(v0, v53, g);
    g[e52].character                = 'O';
    assert(is_inserted52);
    const auto [e53, is_inserted53] = boost::add_edge(v53, v54, g);
    g[e53].character                = ')';
    assert(is_inserted53);
    const auto [e54, is_inserted54] = boost::add_edge(v44, v55, g);
    g[e54].character                = 'H';
    assert(is_inserted54);
    const auto [e55, is_inserted55] = boost::add_edge(v55, v56, g);
    g[e55].character                = ']';
    assert(is_inserted55);
    const auto [e56, is_inserted56] = boost::add_edge(v0, v57, g);
    g[e56].character                = '@';
    assert(is_inserted56);
    const auto [e57, is_inserted57] = boost::add_edge(v14, v58, g);
    g[e57].character                = 'C';
    assert(is_inserted57);
    const auto [e58, is_inserted58] = boost::add_edge(v0, v59, g);
    g[e58].character                = 'B';
    assert(is_inserted58);
    const auto [e59, is_inserted59] = boost::add_edge(v13, v60, g);
    g[e59].character                = 'F';
    assert(is_inserted59);
    const auto [e60, is_inserted60] = boost::add_edge(v60, v61, g);
    g[e60].character                = ')';
    assert(is_inserted60);
    const auto [e61, is_inserted61] = boost::add_edge(v1, v62, g);
    g[e61].character                = '0';
    assert(is_inserted61);
    const auto [e62, is_inserted62] = boost::add_edge(v0, v63, g);
    g[e62].character                = 'F';
    assert(is_inserted62);
    const auto [e63, is_inserted63] = boost::add_edge(v5, v64, g);
    g[e63].character                = 'N';
    assert(is_inserted63);
    const auto [e64, is_inserted64] = boost::add_edge(v6, v65, g);
    g[e64].character                = 'n';
    assert(is_inserted64);
    const auto [e65, is_inserted65] = boost::add_edge(v0, v66, g);
    g[e65].character                = 'I';
    assert(is_inserted65);
    const auto [e66, is_inserted66] = boost::add_edge(v6, v67, g);
    g[e66].character                = '2';
    assert(is_inserted66);
    const auto [e67, is_inserted67] = boost::add_edge(v1, v68, g);
    g[e67].character                = 'N';
    assert(is_inserted67);
    const auto [e68, is_inserted68] = boost::add_edge(v10, v69, g);
    g[e68].character                = 'c';
    assert(is_inserted68);
    const auto [e69, is_inserted69] = boost::add_edge(v69, v70, g);
    g[e69].character                = 'c';
    assert(is_inserted69);
    const auto [e70, is_inserted70] = boost::add_edge(v70, v71, g);
    g[e70].character                = '0';
    assert(is_inserted70);
    const auto [e71, is_inserted71] = boost::add_edge(v0, v72, g);
    g[e71].character                = 'N';
    assert(is_inserted71);
    const auto [e72, is_inserted72] = boost::add_edge(v0, v73, g);
    g[e72].character                = 'P';
    assert(is_inserted72);
    const auto [e73, is_inserted73] = boost::add_edge(v7, v74, g);
    g[e73].character                = 'n';
    assert(is_inserted73);
    const auto [e74, is_inserted74] = boost::add_edge(v10, v75, g);
    g[e74].character                = '(';
    assert(is_inserted74);
    const auto [e75, is_inserted75] = boost::add_edge(v75, v76, g);
    g[e75].character                = 'c';
    assert(is_inserted75);
    const auto [e76, is_inserted76] = boost::add_edge(v76, v77, g);
    g[e76].character                = 'c';
    assert(is_inserted76);
    const auto [e77, is_inserted77] = boost::add_edge(v77, v78, g);
    g[e77].character                = '0';
    assert(is_inserted77);
    const auto [e78, is_inserted78] = boost::add_edge(v78, v79, g);
    g[e78].character                = ')';
    assert(is_inserted78);
    const auto [e79, is_inserted79] = boost::add_edge(v62, v80, g);
    g[e79].character                = 'C';
    assert(is_inserted79);
    const auto [e80, is_inserted80] = boost::add_edge(v80, v81, g);
    g[e80].character                = 'C';
    assert(is_inserted80);
    const auto [e81, is_inserted81] = boost::add_edge(v38, v82, g);
    g[e81].character                = 'c';
    assert(is_inserted81);
    const auto [e82, is_inserted82] = boost::add_edge(v82, v83, g);
    g[e82].character                = 'c';
    assert(is_inserted82);
    const auto [e83, is_inserted83] = boost::add_edge(v41, v84, g);
    g[e83].character                = 'n';
    assert(is_inserted83);
    const auto [e84, is_inserted84] = boost::add_edge(v84, v85, g);
    g[e84].character                = '0';
    assert(is_inserted84);
    const auto [e85, is_inserted85] = boost::add_edge(v85, v86, g);
    g[e85].character                = ')';
    assert(is_inserted85);
    const auto [e86, is_inserted86] = boost::add_edge(v1, v87, g);
    g[e86].character                = '1';
    assert(is_inserted86);
    const auto [e87, is_inserted87] = boost::add_edge(v2, v88, g);
    g[e87].character                = 'C';
    assert(is_inserted87);
    const auto [e88, is_inserted88] = boost::add_edge(v88, v89, g);
    g[e88].character                = ')';
    assert(is_inserted88);
    const auto [e89, is_inserted89] = boost::add_edge(v89, v90, g);
    g[e89].character                = '(';
    assert(is_inserted89);
    const auto [e90, is_inserted90] = boost::add_edge(v90, v91, g);
    g[e90].character                = 'C';
    assert(is_inserted90);
    const auto [e91, is_inserted91] = boost::add_edge(v91, v92, g);
    g[e91].character                = ')';
    assert(is_inserted91);
    const auto [e92, is_inserted92] = boost::add_edge(v1, v93, g);
    g[e92].character                = 'O';
    assert(is_inserted92);
    const auto [e93, is_inserted93] = boost::add_edge(v0, v94, g);
    g[e93].character                = 'Z';
    assert(is_inserted93);
    const auto [e94, is_inserted94] = boost::add_edge(v0, v95, g);
    g[e94].character                = '\\';
    assert(is_inserted94);
    const auto [e95, is_inserted95] = boost::add_edge(v0, v96, g);
    g[e95].character                = ']';
    assert(is_inserted95);
    const auto [e96, is_inserted96] = boost::add_edge(v1, v97, g);
    g[e96].character                = ')';
    assert(is_inserted96);
    const auto [e97, is_inserted97] = boost::add_edge(v42, v98, g);
    g[e97].character                = 'N';
    assert(is_inserted97);
    const auto [e98, is_inserted98] = boost::add_edge(v98, v99, g);
    g[e98].character                = '+';
    assert(is_inserted98);
    const auto [e99, is_inserted99] = boost::add_edge(v99, v100, g);
    g[e99].character                = ']';
    assert(is_inserted99);
    const auto [e100, is_inserted100] = boost::add_edge(v100, v101, g);
    g[e100].character                 = '(';
    assert(is_inserted100);
    const auto [e101, is_inserted101] = boost::add_edge(v101, v102, g);
    g[e101].character                 = '=';
    assert(is_inserted101);
    const auto [e102, is_inserted102] = boost::add_edge(v102, v103, g);
    g[e102].character                 = 'O';
    assert(is_inserted102);
    const auto [e103, is_inserted103] = boost::add_edge(v103, v104, g);
    g[e103].character                 = ')';
    assert(is_inserted103);
    const auto [e104, is_inserted104] = boost::add_edge(v104, v105, g);
    g[e104].character                 = '[';
    assert(is_inserted104);
    const auto [e105, is_inserted105] = boost::add_edge(v105, v106, g);
    g[e105].character                 = 'O';
    assert(is_inserted105);
    const auto [e106, is_inserted106] = boost::add_edge(v106, v107, g);
    g[e106].character                 = '-';
    assert(is_inserted106);
    const auto [e107, is_inserted107] = boost::add_edge(v107, v108, g);
    g[e107].character                 = ']';
    assert(is_inserted107);
    const auto [e108, is_inserted108] = boost::add_edge(v12, v109, g);
    g[e108].character                 = '0';
    assert(is_inserted108);
    const auto [e109, is_inserted109] = boost::add_edge(v72, v110, g);
    g[e109].character                 = 'C';
    assert(is_inserted109);
    const auto [e110, is_inserted110] = boost::add_edge(v110, v111, g);
    g[e110].character                 = '(';
    assert(is_inserted110);
    const auto [e111, is_inserted111] = boost::add_edge(v111, v112, g);
    g[e111].character                 = '=';
    assert(is_inserted111);
    const auto [e112, is_inserted112] = boost::add_edge(v112, v113, g);
    g[e112].character                 = 'O';
    assert(is_inserted112);
    const auto [e113, is_inserted113] = boost::add_edge(v113, v114, g);
    g[e113].character                 = ')';
    assert(is_inserted113);
    const auto [e114, is_inserted114] = boost::add_edge(v0, v115, g);
    g[e114].character                 = 'n';
    assert(is_inserted114);
    const auto [e115, is_inserted115] = boost::add_edge(v115, v116, g);
    g[e115].character                 = '0';
    assert(is_inserted115);
    const auto [e116, is_inserted116] = boost::add_edge(v67, v117, g);
    g[e116].character                 = 'c';
    assert(is_inserted116);
    const auto [e117, is_inserted117] = boost::add_edge(v117, v118, g);
    g[e117].character                 = 'c';
    assert(is_inserted117);
    const auto [e118, is_inserted118] = boost::add_edge(v118, v119, g);
    g[e118].character                 = 'c';
    assert(is_inserted118);
    const auto [e119, is_inserted119] = boost::add_edge(v119, v120, g);
    g[e119].character                 = 'c';
    assert(is_inserted119);
    const auto [e120, is_inserted120] = boost::add_edge(v120, v121, g);
    g[e120].character                 = 'c';
    assert(is_inserted120);
    const auto [e121, is_inserted121] = boost::add_edge(v121, v122, g);
    g[e121].character                 = '1';
    assert(is_inserted121);
    const auto [e122, is_inserted122] = boost::add_edge(v122, v123, g);
    g[e122].character                 = '2';
    assert(is_inserted122);
    const auto [e123, is_inserted123] = boost::add_edge(v52, v124, g);
    g[e123].character                 = 'C';
    assert(is_inserted123);
    const auto [e124, is_inserted124] = boost::add_edge(v7, v125, g);
    g[e124].character                 = ')';
    assert(is_inserted124);
    const auto [e125, is_inserted125] = boost::add_edge(v14, v126, g);
    g[e125].character                 = 'l';
    assert(is_inserted125);
    const auto [e126, is_inserted126] = boost::add_edge(v126, v127, g);
    g[e126].character                 = ')';
    assert(is_inserted126);
    const auto [e127, is_inserted127] = boost::add_edge(v0, v128, g);
    g[e127].character                 = 'i';
    assert(is_inserted127);
    const auto [e128, is_inserted128] = boost::add_edge(v109, v129, g);
    g[e128].character                 = ')';
    assert(is_inserted128);
    const auto [e129, is_inserted129] = boost::add_edge(v115, v130, g);
    g[e129].character                 = '1';
    assert(is_inserted129);
    const auto [e130, is_inserted130] = boost::add_edge(v0, v131, g);
    g[e130].character                 = 'l';
    assert(is_inserted130);
    const auto [e131, is_inserted131] = boost::add_edge(v72, v132, g);
    g[e131].character                 = '0';
    assert(is_inserted131);
    const auto [e132, is_inserted132] = boost::add_edge(v132, v133, g);
    g[e132].character                 = 'C';
    assert(is_inserted132);
    const auto [e133, is_inserted133] = boost::add_edge(v133, v134, g);
    g[e133].character                 = 'C';
    assert(is_inserted133);
    const auto [e134, is_inserted134] = boost::add_edge(v0, v135, g);
    g[e134].character                 = 'o';
    assert(is_inserted134);
    const auto [e135, is_inserted135] = boost::add_edge(v33, v136, g);
    g[e135].character                 = ')';
    assert(is_inserted135);
    const auto [e136, is_inserted136] = boost::add_edge(v14, v137, g);
    g[e136].character                 = '0';
    assert(is_inserted136);
    const auto [e137, is_inserted137] = boost::add_edge(v137, v138, g);
    g[e137].character                 = ')';
    assert(is_inserted137);
    const auto [e138, is_inserted138] = boost::add_edge(v0, v139, g);
    g[e138].character                 = 'r';
    assert(is_inserted138);
    const auto [e139, is_inserted139] = boost::add_edge(v0, v140, g);
    g[e139].character                 = 's';
    assert(is_inserted139);
    const auto [e140, is_inserted140] = boost::add_edge(v115, v141, g);
    g[e140].character                 = 'n';
    assert(is_inserted140);
    const auto [e141, is_inserted141] = boost::add_edge(v62, v142, g);
    g[e141].character                 = ')';
    assert(is_inserted141);
    const auto [e142, is_inserted142] = boost::add_edge(v8, v143, g);
    g[e142].character                 = 'n';
    assert(is_inserted142);
    const auto [e143, is_inserted143] = boost::add_edge(v13, v144, g);
    g[e143].character                 = 'O';
    assert(is_inserted143);
    const auto [e144, is_inserted144] = boost::add_edge(v144, v145, g);
    g[e144].character                 = ')';
    assert(is_inserted144);
    const auto [e145, is_inserted145] = boost::add_edge(v52, v146, g);
    g[e145].character                 = 'O';
    assert(is_inserted145);
    const auto [e146, is_inserted146] = boost::add_edge(v146, v147, g);
    g[e146].character                 = ')';
    assert(is_inserted146);
    const auto [e147, is_inserted147] = boost::add_edge(v53, v148, g);
    g[e147].character                 = 'C';
    assert(is_inserted147);
    const auto [e148, is_inserted148] = boost::add_edge(v148, v149, g);
    g[e148].character                 = 'C';
    assert(is_inserted148);
    const auto [e149, is_inserted149] = boost::add_edge(v6, v150, g);
    g[e149].character                 = '3';
    assert(is_inserted149);
    const auto [e150, is_inserted150] = boost::add_edge(v150, v151, g);
    g[e150].character                 = 'c';
    assert(is_inserted150);
    const auto [e151, is_inserted151] = boost::add_edge(v151, v152, g);
    g[e151].character                 = 'c';
    assert(is_inserted151);
    const auto [e152, is_inserted152] = boost::add_edge(v152, v153, g);
    g[e152].character                 = 'c';
    assert(is_inserted152);
    const auto [e153, is_inserted153] = boost::add_edge(v153, v154, g);
    g[e153].character                 = 'c';
    assert(is_inserted153);
    const auto [e154, is_inserted154] = boost::add_edge(v154, v155, g);
    g[e154].character                 = 'c';
    assert(is_inserted154);
    const auto [e155, is_inserted155] = boost::add_edge(v155, v156, g);
    g[e155].character                 = '2';
    assert(is_inserted155);
    const auto [e156, is_inserted156] = boost::add_edge(v156, v157, g);
    g[e156].character                 = '3';
    assert(is_inserted156);
    const auto [e157, is_inserted157] = boost::add_edge(v157, v158, g);
    g[e157].character                 = ')';
    assert(is_inserted157);
    const auto [e158, is_inserted158] = boost::add_edge(v71, v159, g);
    g[e158].character                 = ')';
    assert(is_inserted158);
    const auto [e159, is_inserted159] = boost::add_edge(v72, v160, g);
    g[e159].character                 = ')';
    assert(is_inserted159);
    const auto [e160, is_inserted160] = boost::add_edge(v15, v161, g);
    g[e160].character                 = '(';
    assert(is_inserted160);
    const auto [e161, is_inserted161] = boost::add_edge(v2, v162, g);
    g[e161].character                 = 'F';
    assert(is_inserted161);
    const auto [e162, is_inserted162] = boost::add_edge(v162, v163, g);
    g[e162].character                 = ')';
    assert(is_inserted162);
    const auto [e163, is_inserted163] = boost::add_edge(v163, v164, g);
    g[e163].character                 = '(';
    assert(is_inserted163);
    const auto [e164, is_inserted164] = boost::add_edge(v164, v165, g);
    g[e164].character                 = 'F';
    assert(is_inserted164);
    const auto [e165, is_inserted165] = boost::add_edge(v165, v166, g);
    g[e165].character                 = ')';
    assert(is_inserted165);
    const auto [e166, is_inserted166] = boost::add_edge(v41, v167, g);
    g[e166].character                 = 'C';
    assert(is_inserted166);
    const auto [e167, is_inserted167] = boost::add_edge(v167, v168, g);
    g[e167].character                 = ')';
    assert(is_inserted167);
    const auto [e168, is_inserted168] = boost::add_edge(v58, v169, g);
    g[e168].character                 = '0';
    assert(is_inserted168);
    const auto [e169, is_inserted169] = boost::add_edge(v169, v170, g);
    g[e169].character                 = ')';
    assert(is_inserted169);
    const auto [e170, is_inserted170] = boost::add_edge(v12, v171, g);
    g[e170].character                 = 'N';
    assert(is_inserted170);
    const auto [e171, is_inserted171] = boost::add_edge(v7, v172, g);
    g[e171].character                 = 'o';
    assert(is_inserted171);
    const auto [e172, is_inserted172] = boost::add_edge(v5, v173, g);
    g[e172].character                 = 'O';
    assert(is_inserted172);
    const auto [e173, is_inserted173] = boost::add_edge(v115, v174, g);
    g[e173].character                 = 'c';
    assert(is_inserted173);
    const auto [e174, is_inserted174] = boost::add_edge(v174, v175, g);
    g[e174].character                 = '0';
    assert(is_inserted174);
    const auto [e175, is_inserted175] = boost::add_edge(v3, v176, g);
    g[e175].character                 = 'C';
    assert(is_inserted175);
    const auto [e176, is_inserted176] = boost::add_edge(v1, v177, g);
    g[e176].character                 = '=';
    assert(is_inserted176);
    const auto [e177, is_inserted177] = boost::add_edge(v177, v178, g);
    g[e177].character                 = 'C';
    assert(is_inserted177);
    const auto [e178, is_inserted178] = boost::add_edge(v140, v179, g);
    g[e178].character                 = '0';
    assert(is_inserted178);
    const auto [e179, is_inserted179] = boost::add_edge(v179, v180, g);
    g[e179].character                 = ')';
    assert(is_inserted179);
    const auto [e180, is_inserted180] = boost::add_edge(v12, v181, g);
    g[e180].character                 = '1';
    assert(is_inserted180);
    const auto [e181, is_inserted181] = boost::add_edge(v59, v182, g);
    g[e181].character                 = 'r';
    assert(is_inserted181);
    const auto [e182, is_inserted182] = boost::add_edge(v182, v183, g);
    g[e182].character                 = ')';
    assert(is_inserted182);
    const auto [e183, is_inserted183] = boost::add_edge(v15, v184, g);
    g[e183].character                 = '1';
    assert(is_inserted183);
    const auto [e184, is_inserted184] = boost::add_edge(v38, v185, g);
    g[e184].character                 = 'n';
    assert(is_inserted184);
    const auto [e185, is_inserted185] = boost::add_edge(v74, v186, g);
    g[e185].character                 = 'c';
    assert(is_inserted185);
    const auto [e186, is_inserted186] = boost::add_edge(v186, v187, g);
    g[e186].character                 = '(';
    assert(is_inserted186);
    const auto [e187, is_inserted187] = boost::add_edge(v187, v188, g);
    g[e187].character                 = 'n';
    assert(is_inserted187);
    const auto [e188, is_inserted188] = boost::add_edge(v188, v189, g);
    g[e188].character                 = '[';
    assert(is_inserted188);
    const auto [e189, is_inserted189] = boost::add_edge(v189, v190, g);
    g[e189].character                 = 'n';
    assert(is_inserted189);
    const auto [e190, is_inserted190] = boost::add_edge(v190, v191, g);
    g[e190].character                 = 'H';
    assert(is_inserted190);
    const auto [e191, is_inserted191] = boost::add_edge(v191, v192, g);
    g[e191].character                 = ']';
    assert(is_inserted191);
    const auto [e192, is_inserted192] = boost::add_edge(v192, v193, g);
    g[e192].character                 = '0';
    assert(is_inserted192);
    const auto [e193, is_inserted193] = boost::add_edge(v193, v194, g);
    g[e193].character                 = ')';
    assert(is_inserted193);
    const auto [e194, is_inserted194] = boost::add_edge(v69, v195, g);
    g[e194].character                 = '(';
    assert(is_inserted194);
    const auto [e195, is_inserted195] = boost::add_edge(v195, v196, g);
    g[e195].character                 = 'c';
    assert(is_inserted195);
    const auto [e196, is_inserted196] = boost::add_edge(v196, v197, g);
    g[e196].character                 = '0';
    assert(is_inserted196);
    const auto [e197, is_inserted197] = boost::add_edge(v197, v198, g);
    g[e197].character                 = ')';
    assert(is_inserted197);
    const auto [e198, is_inserted198] = boost::add_edge(v8, v199, g);
    g[e198].character                 = 's';
    assert(is_inserted198);
    const auto [e199, is_inserted199] = boost::add_edge(v12, v200, g);
    g[e199].character                 = '(';
    assert(is_inserted199);
    const auto [e200, is_inserted200] = boost::add_edge(v200, v201, g);
    g[e200].character                 = 'C';
    assert(is_inserted200);
    const auto [e201, is_inserted201] = boost::add_edge(v201, v202, g);
    g[e201].character                 = ')';
    assert(is_inserted201);
    const auto [e202, is_inserted202] = boost::add_edge(v65, v203, g);
    g[e202].character                 = '0';
    assert(is_inserted202);
    const auto [e203, is_inserted203] = boost::add_edge(v203, v204, g);
    g[e203].character                 = ')';
    assert(is_inserted203);
    const auto [e204, is_inserted204] = boost::add_edge(v109, v205, g);
    g[e204].character                 = 'C';
    assert(is_inserted204);
    const auto [e205, is_inserted205] = boost::add_edge(v205, v206, g);
    g[e205].character                 = 'C';
    assert(is_inserted205);
    const auto [e206, is_inserted206] = boost::add_edge(v48, v207, g);
    g[e206].character                 = ')';
    assert(is_inserted206);
    const auto [e207, is_inserted207] = boost::add_edge(v15, v208, g);
    g[e207].character                 = 'c';
    assert(is_inserted207);
    const auto [e208, is_inserted208] = boost::add_edge(v208, v209, g);
    g[e208].character                 = '0';
    assert(is_inserted208);
    const auto [e209, is_inserted209] = boost::add_edge(v1, v210, g);
    g[e209].character                 = '2';
    assert(is_inserted209);
    const auto [e210, is_inserted210] = boost::add_edge(v9, v211, g);
    g[e210].character                 = '(';
    assert(is_inserted210);
    const auto [e211, is_inserted211] = boost::add_edge(v173, v212, g);
    g[e211].character                 = ')';
    assert(is_inserted211);
    const auto [e212, is_inserted212] = boost::add_edge(v83, v213, g);
    g[e212].character                 = 'c';
    assert(is_inserted212);
    const auto [e213, is_inserted213] = boost::add_edge(v213, v214, g);
    g[e213].character                 = '(';
    assert(is_inserted213);
    const auto [e214, is_inserted214] = boost::add_edge(v64, v215, g);
    g[e214].character                 = '0';
    assert(is_inserted214);
    const auto [e215, is_inserted215] = boost::add_edge(v215, v216, g);
    g[e215].character                 = 'C';
    assert(is_inserted215);
    const auto [e216, is_inserted216] = boost::add_edge(v216, v217, g);
    g[e216].character                 = 'C';
    assert(is_inserted216);
    const auto [e217, is_inserted217] = boost::add_edge(v174, v218, g);
    g[e217].character                 = '(';
    assert(is_inserted217);
    const auto [e218, is_inserted218] = boost::add_edge(v12, v219, g);
    g[e218].character                 = 'O';
    assert(is_inserted218);
    const auto [e219, is_inserted219] = boost::add_edge(v172, v220, g);
    g[e219].character                 = 'n';
    assert(is_inserted219);
    const auto [e220, is_inserted220] = boost::add_edge(v220, v221, g);
    g[e220].character                 = 'c';
    assert(is_inserted220);
    const auto [e221, is_inserted221] = boost::add_edge(v221, v222, g);
    g[e221].character                 = '(';
    assert(is_inserted221);
    const auto [e222, is_inserted222] = boost::add_edge(v222, v223, g);
    g[e222].character                 = 'n';
    assert(is_inserted222);
    const auto [e223, is_inserted223] = boost::add_edge(v223, v224, g);
    g[e223].character                 = '0';
    assert(is_inserted223);
    const auto [e224, is_inserted224] = boost::add_edge(v224, v225, g);
    g[e224].character                 = ')';
    assert(is_inserted224);
    const auto [e225, is_inserted225] = boost::add_edge(v2, v226, g);
    g[e225].character                 = 'O';
    assert(is_inserted225);
    const auto [e226, is_inserted226] = boost::add_edge(v226, v227, g);
    g[e226].character                 = ')';
    assert(is_inserted226);
    const auto [e227, is_inserted227] = boost::add_edge(v186, v228, g);
    g[e227].character                 = 'c';
    assert(is_inserted227);
    const auto [e228, is_inserted228] = boost::add_edge(v68, v229, g);
    g[e228].character                 = '(';
    assert(is_inserted228);
    const auto [e229, is_inserted229] = boost::add_edge(v229, v230, g);
    g[e229].character                 = 'C';
    assert(is_inserted229);
    const auto [e230, is_inserted230] = boost::add_edge(v32, v231, g);
    g[e230].character                 = ')';
    assert(is_inserted230);
    const auto [e231, is_inserted231] = boost::add_edge(v74, v232, g);
    g[e231].character                 = 'o';
    assert(is_inserted231);
    const auto [e232, is_inserted232] = boost::add_edge(v232, v233, g);
    g[e232].character                 = 'c';
    assert(is_inserted232);
    const auto [e233, is_inserted233] = boost::add_edge(v233, v234, g);
    g[e233].character                 = '(';
    assert(is_inserted233);
    const auto [e234, is_inserted234] = boost::add_edge(v234, v235, g);
    g[e234].character                 = 'n';
    assert(is_inserted234);
    const auto [e235, is_inserted235] = boost::add_edge(v235, v236, g);
    g[e235].character                 = '0';
    assert(is_inserted235);
    const auto [e236, is_inserted236] = boost::add_edge(v236, v237, g);
    g[e236].character                 = ')';
    assert(is_inserted236);
    const auto [e237, is_inserted237] = boost::add_edge(v1, v238, g);
    g[e237].character                 = 'S';
    assert(is_inserted237);
    const auto [e238, is_inserted238] = boost::add_edge(v12, v239, g);
    g[e238].character                 = 'C';
    assert(is_inserted238);
    const auto [e239, is_inserted239] = boost::add_edge(v239, v240, g);
    g[e239].character                 = '0';
    assert(is_inserted239);
    const auto [e240, is_inserted240] = boost::add_edge(v1, v241, g);
    g[e240].character                 = 'l';
    assert(is_inserted240);
    const auto [e241, is_inserted241] = boost::add_edge(v241, v242, g);
    g[e241].character                 = ')';
    assert(is_inserted241);
    const auto [e242, is_inserted242] = boost::add_edge(v202, v243, g);
    g[e242].character                 = '(';
    assert(is_inserted242);
    const auto [e243, is_inserted243] = boost::add_edge(v243, v244, g);
    g[e243].character                 = 'C';
    assert(is_inserted243);
    const auto [e244, is_inserted244] = boost::add_edge(v244, v245, g);
    g[e244].character                 = ')';
    assert(is_inserted244);
    const auto [e245, is_inserted245] = boost::add_edge(v245, v246, g);
    g[e245].character                 = 'O';
    assert(is_inserted245);
    const auto [e246, is_inserted246] = boost::add_edge(v32, v247, g);
    g[e246].character                 = 'C';
    assert(is_inserted246);
    const auto [e247, is_inserted247] = boost::add_edge(v247, v248, g);
    g[e247].character                 = 'C';
    assert(is_inserted247);
    const auto [e248, is_inserted248] = boost::add_edge(v63, v249, g);
    g[e248].character                 = ')';
    assert(is_inserted248);
    const auto [e249, is_inserted249] = boost::add_edge(v173, v250, g);
    g[e249].character                 = 'C';
    assert(is_inserted249);
    const auto [e250, is_inserted250] = boost::add_edge(v250, v251, g);
    g[e250].character                 = '(';
    assert(is_inserted250);
    const auto [e251, is_inserted251] = boost::add_edge(v251, v252, g);
    g[e251].character                 = 'C';
    assert(is_inserted251);
    const auto [e252, is_inserted252] = boost::add_edge(v252, v253, g);
    g[e252].character                 = ')';
    assert(is_inserted252);
    const auto [e253, is_inserted253] = boost::add_edge(v253, v254, g);
    g[e253].character                 = '(';
    assert(is_inserted253);
    const auto [e254, is_inserted254] = boost::add_edge(v254, v255, g);
    g[e254].character                 = 'C';
    assert(is_inserted254);
    const auto [e255, is_inserted255] = boost::add_edge(v255, v256, g);
    g[e255].character                 = ')';
    assert(is_inserted255);
    const auto [e256, is_inserted256] = boost::add_edge(v256, v257, g);
    g[e256].character                 = 'C';
    assert(is_inserted256);
    const auto [e257, is_inserted257] = boost::add_edge(v9, v258, g);
    g[e257].character                 = 'n';
    assert(is_inserted257);
    const auto [e258, is_inserted258] = boost::add_edge(v62, v259, g);
    g[e258].character                 = '(';
    assert(is_inserted258);
    const auto [e259, is_inserted259] = boost::add_edge(v259, v260, g);
    g[e259].character                 = 'C';
    assert(is_inserted259);
    const auto [e260, is_inserted260] = boost::add_edge(v260, v261, g);
    g[e260].character                 = 'C';
    assert(is_inserted260);
    const auto [e261, is_inserted261] = boost::add_edge(v116, v262, g);
    g[e261].character                 = ')';
    assert(is_inserted261);
    const auto [e262, is_inserted262] = boost::add_edge(v38, v263, g);
    g[e262].character                 = ')';
    assert(is_inserted262);
    const auto [e263, is_inserted263] = boost::add_edge(v34, v264, g);
    g[e263].character                 = ')';
    assert(is_inserted263);
    const auto [e264, is_inserted264] = boost::add_edge(v52, v265, g);
    g[e264].character                 = 'N';
    assert(is_inserted264);
    const auto [e265, is_inserted265] = boost::add_edge(v230, v266, g);
    g[e265].character                 = 'C';
    assert(is_inserted265);
    const auto [e266, is_inserted266] = boost::add_edge(v72, v267, g);
    g[e266].character                 = '(';
    assert(is_inserted266);
    const auto [e267, is_inserted267] = boost::add_edge(v267, v268, g);
    g[e267].character                 = 'C';
    assert(is_inserted267);
    const auto [e268, is_inserted268] = boost::add_edge(v42, v269, g);
    g[e268].character                 = 'O';
    assert(is_inserted268);
    const auto [e269, is_inserted269] = boost::add_edge(v269, v270, g);
    g[e269].character                 = '-';
    assert(is_inserted269);
    const auto [e270, is_inserted270] = boost::add_edge(v270, v271, g);
    g[e270].character                 = ']';
    assert(is_inserted270);
    const auto [e271, is_inserted271] = boost::add_edge(v271, v272, g);
    g[e271].character                 = '[';
    assert(is_inserted271);
    const auto [e272, is_inserted272] = boost::add_edge(v272, v273, g);
    g[e272].character                 = 'N';
    assert(is_inserted272);
    const auto [e273, is_inserted273] = boost::add_edge(v273, v274, g);
    g[e273].character                 = '+';
    assert(is_inserted273);
    const auto [e274, is_inserted274] = boost::add_edge(v274, v275, g);
    g[e274].character                 = ']';
    assert(is_inserted274);
    const auto [e275, is_inserted275] = boost::add_edge(v275, v276, g);
    g[e275].character                 = '(';
    assert(is_inserted275);
    const auto [e276, is_inserted276] = boost::add_edge(v276, v277, g);
    g[e276].character                 = '=';
    assert(is_inserted276);
    const auto [e277, is_inserted277] = boost::add_edge(v277, v278, g);
    g[e277].character                 = 'O';
    assert(is_inserted277);
    const auto [e278, is_inserted278] = boost::add_edge(v278, v279, g);
    g[e278].character                 = ')';
    assert(is_inserted278);
    const auto [e279, is_inserted279] = boost::add_edge(v74, v280, g);
    g[e279].character                 = '[';
    assert(is_inserted279);
    const auto [e280, is_inserted280] = boost::add_edge(v280, v281, g);
    g[e280].character                 = 'n';
    assert(is_inserted280);
    const auto [e281, is_inserted281] = boost::add_edge(v281, v282, g);
    g[e281].character                 = 'H';
    assert(is_inserted281);
    const auto [e282, is_inserted282] = boost::add_edge(v282, v283, g);
    g[e282].character                 = ']';
    assert(is_inserted282);
    const auto [e283, is_inserted283] = boost::add_edge(v283, v284, g);
    g[e283].character                 = 'c';
    assert(is_inserted283);
    const auto [e284, is_inserted284] = boost::add_edge(v284, v285, g);
    g[e284].character                 = '(';
    assert(is_inserted284);
    const auto [e285, is_inserted285] = boost::add_edge(v285, v286, g);
    g[e285].character                 = 'n';
    assert(is_inserted285);
    const auto [e286, is_inserted286] = boost::add_edge(v286, v287, g);
    g[e286].character                 = '0';
    assert(is_inserted286);
    const auto [e287, is_inserted287] = boost::add_edge(v287, v288, g);
    g[e287].character                 = ')';
    assert(is_inserted287);
    const auto [e288, is_inserted288] = boost::add_edge(v268, v289, g);
    g[e288].character                 = 'C';
    assert(is_inserted288);
    const auto [e289, is_inserted289] = boost::add_edge(v289, v290, g);
    g[e289].character                 = '0';
    assert(is_inserted289);
    const auto [e290, is_inserted290] = boost::add_edge(v290, v291, g);
    g[e290].character                 = ')';
    assert(is_inserted290);
    const auto [e291, is_inserted291] = boost::add_edge(v87, v292, g);
    g[e291].character                 = '=';
    assert(is_inserted291);
    const auto [e292, is_inserted292] = boost::add_edge(v292, v293, g);
    g[e292].character                 = 'O';
    assert(is_inserted292);
    const auto [e293, is_inserted293] = boost::add_edge(v268, v294, g);
    g[e293].character                 = ')';
    assert(is_inserted293);
    const auto [e294, is_inserted294] = boost::add_edge(v82, v295, g);
    g[e294].character                 = 'n';
    assert(is_inserted294);
    const auto [e295, is_inserted295] = boost::add_edge(v149, v296, g);
    g[e295].character                 = '1';
    assert(is_inserted295);
    const auto [e296, is_inserted296] = boost::add_edge(v296, v297, g);
    g[e296].character                 = 'c';
    assert(is_inserted296);
    const auto [e297, is_inserted297] = boost::add_edge(v297, v298, g);
    g[e297].character                 = '0';
    assert(is_inserted297);
    const auto [e298, is_inserted298] = boost::add_edge(v298, v299, g);
    g[e298].character                 = 'c';
    assert(is_inserted298);
    const auto [e299, is_inserted299] = boost::add_edge(v299, v300, g);
    g[e299].character                 = 'c';
    assert(is_inserted299);
    const auto [e300, is_inserted300] = boost::add_edge(v300, v301, g);
    g[e300].character                 = 'c';
    assert(is_inserted300);
    const auto [e301, is_inserted301] = boost::add_edge(v301, v302, g);
    g[e301].character                 = 'c';
    assert(is_inserted301);
    const auto [e302, is_inserted302] = boost::add_edge(v302, v303, g);
    g[e302].character                 = 'c';
    assert(is_inserted302);
    const auto [e303, is_inserted303] = boost::add_edge(v303, v304, g);
    g[e303].character                 = '0';
    assert(is_inserted303);
    const auto [e304, is_inserted304] = boost::add_edge(v116, v305, g);
    g[e304].character                 = 'n';
    assert(is_inserted304);
    const auto [e305, is_inserted305] = boost::add_edge(v305, v306, g);
    g[e305].character                 = 'n';
    assert(is_inserted305);
    const auto [e306, is_inserted306] = boost::add_edge(v45, v307, g);
    g[e306].character                 = ']';
    assert(is_inserted306);
    const auto [e307, is_inserted307] = boost::add_edge(v6, v308, g);
    g[e307].character                 = '4';
    assert(is_inserted307);
    const auto [e308, is_inserted308] = boost::add_edge(v308, v309, g);
    g[e308].character                 = 'c';
    assert(is_inserted308);
    const auto [e309, is_inserted309] = boost::add_edge(v309, v310, g);
    g[e309].character                 = 'c';
    assert(is_inserted309);
    const auto [e310, is_inserted310] = boost::add_edge(v310, v311, g);
    g[e310].character                 = 'c';
    assert(is_inserted310);
    const auto [e311, is_inserted311] = boost::add_edge(v311, v312, g);
    g[e311].character                 = 'c';
    assert(is_inserted311);
    const auto [e312, is_inserted312] = boost::add_edge(v312, v313, g);
    g[e312].character                 = 'c';
    assert(is_inserted312);
    const auto [e313, is_inserted313] = boost::add_edge(v313, v314, g);
    g[e313].character                 = '3';
    assert(is_inserted313);
    const auto [e314, is_inserted314] = boost::add_edge(v314, v315, g);
    g[e314].character                 = '4';
    assert(is_inserted314);
    const auto [e315, is_inserted315] = boost::add_edge(v315, v316, g);
    g[e315].character                 = ')';
    assert(is_inserted315);
    const auto [e316, is_inserted316] = boost::add_edge(v95, v317, g);
    g[e316].character                 = 'C';
    assert(is_inserted316);
    const auto [e317, is_inserted317] = boost::add_edge(v317, v318, g);
    g[e317].character                 = '=';
    assert(is_inserted317);
    const auto [e318, is_inserted318] = boost::add_edge(v318, v319, g);
    g[e318].character                 = 'C';
    assert(is_inserted318);
    const auto [e319, is_inserted319] = boost::add_edge(v319, v320, g);
    g[e319].character                 = '\\';
    assert(is_inserted319);
    const auto [e320, is_inserted320] = boost::add_edge(v167, v321, g);
    g[e320].character                 = 'l';
    assert(is_inserted320);
    const auto [e321, is_inserted321] = boost::add_edge(v321, v322, g);
    g[e321].character                 = ')';
    assert(is_inserted321);
    const auto [e322, is_inserted322] = boost::add_edge(v2, v323, g);
    g[e322].character                 = 'N';
    assert(is_inserted322);
    const auto [e323, is_inserted323] = boost::add_edge(v5, v324, g);
    g[e323].character                 = 'C';
    assert(is_inserted323);
    const auto [e324, is_inserted324] = boost::add_edge(v240, v325, g);
    g[e324].character                 = ')';
    assert(is_inserted324);
    const auto [e325, is_inserted325] = boost::add_edge(v239, v326, g);
    g[e325].character                 = 'C';
    assert(is_inserted325);
    const auto [e326, is_inserted326] = boost::add_edge(v1, v327, g);
    g[e326].character                 = '#';
    assert(is_inserted326);
    const auto [e327, is_inserted327] = boost::add_edge(v327, v328, g);
    g[e327].character                 = 'N';
    assert(is_inserted327);
    const auto [e328, is_inserted328] = boost::add_edge(v328, v329, g);
    g[e328].character                 = ')';
    assert(is_inserted328);
    const auto [e329, is_inserted329] = boost::add_edge(v3, v330, g);
    g[e329].character                 = 'S';
    assert(is_inserted329);
    const auto [e330, is_inserted330] = boost::add_edge(v330, v331, g);
    g[e330].character                 = ')';
    assert(is_inserted330);
    const auto [e331, is_inserted331] = boost::add_edge(v9, v332, g);
    g[e331].character                 = 's';
    assert(is_inserted331);
    const auto [e332, is_inserted332] = boost::add_edge(v332, v333, g);
    g[e332].character                 = 'c';
    assert(is_inserted332);
    const auto [e333, is_inserted333] = boost::add_edge(v333, v334, g);
    g[e333].character                 = '0';
    assert(is_inserted333);
    const auto [e334, is_inserted334] = boost::add_edge(v230, v335, g);
    g[e334].character                 = '0';
    assert(is_inserted334);
    const auto [e335, is_inserted335] = boost::add_edge(v335, v336, g);
    g[e335].character                 = ')';
    assert(is_inserted335);
    const auto [e336, is_inserted336] = boost::add_edge(v1, v337, g);
    g[e336].character                 = 'c';
    assert(is_inserted336);
    const auto [e337, is_inserted337] = boost::add_edge(v337, v338, g);
    g[e337].character                 = '1';
    assert(is_inserted337);
    const auto [e338, is_inserted338] = boost::add_edge(v338, v339, g);
    g[e338].character                 = 'c';
    assert(is_inserted338);
    const auto [e339, is_inserted339] = boost::add_edge(v339, v340, g);
    g[e339].character                 = 'c';
    assert(is_inserted339);
    const auto [e340, is_inserted340] = boost::add_edge(v10, v341, g);
    g[e340].character                 = 'n';
    assert(is_inserted340);
    const auto [e341, is_inserted341] = boost::add_edge(v341, v342, g);
    g[e341].character                 = 'c';
    assert(is_inserted341);
    const auto [e342, is_inserted342] = boost::add_edge(v342, v343, g);
    g[e342].character                 = '0';
    assert(is_inserted342);
    const auto [e343, is_inserted343] = boost::add_edge(v74, v344, g);
    g[e343].character                 = 'n';
    assert(is_inserted343);
    const auto [e344, is_inserted344] = boost::add_edge(v344, v345, g);
    g[e344].character                 = 'n';
    assert(is_inserted344);
    const auto [e345, is_inserted345] = boost::add_edge(v345, v346, g);
    g[e345].character                 = 'n';
    assert(is_inserted345);
    const auto [e346, is_inserted346] = boost::add_edge(v346, v347, g);
    g[e346].character                 = '0';
    assert(is_inserted346);
    const auto [e347, is_inserted347] = boost::add_edge(v347, v348, g);
    g[e347].character                 = 'C';
    assert(is_inserted347);
    const auto [e348, is_inserted348] = boost::add_edge(v148, v349, g);
    g[e348].character                 = '(';
    assert(is_inserted348);
    const auto [e349, is_inserted349] = boost::add_edge(v349, v350, g);
    g[e349].character                 = '=';
    assert(is_inserted349);
    const auto [e350, is_inserted350] = boost::add_edge(v350, v351, g);
    g[e350].character                 = 'O';
    assert(is_inserted350);
    const auto [e351, is_inserted351] = boost::add_edge(v351, v352, g);
    g[e351].character                 = ')';
    assert(is_inserted351);
    const auto [e352, is_inserted352] = boost::add_edge(v38, v353, g);
    g[e352].character                 = '2';
    assert(is_inserted352);
    const auto [e353, is_inserted353] = boost::add_edge(v353, v354, g);
    g[e353].character                 = ')';
    assert(is_inserted353);
    const auto [e354, is_inserted354] = boost::add_edge(v130, v355, g);
    g[e354].character                 = ')';
    assert(is_inserted354);
    const auto [e355, is_inserted355] = boost::add_edge(v141, v356, g);
    g[e355].character                 = '0';
    assert(is_inserted355);
    const auto [e356, is_inserted356] = boost::add_edge(v356, v357, g);
    g[e356].character                 = ')';
    assert(is_inserted356);
    const auto [e357, is_inserted357] = boost::add_edge(v68, v358, g);
    g[e357].character                 = '0';
    assert(is_inserted357);
    const auto [e358, is_inserted358] = boost::add_edge(v15, v359, g);
    g[e358].character                 = '2';
    assert(is_inserted358);
    const auto [e359, is_inserted359] = boost::add_edge(v62, v360, g);
    g[e359].character                 = '=';
    assert(is_inserted359);
    const auto [e360, is_inserted360] = boost::add_edge(v81, v361, g);
    g[e360].character                 = '0';
    assert(is_inserted360);
    const auto [e361, is_inserted361] = boost::add_edge(v361, v362, g);
    g[e361].character                 = ')';
    assert(is_inserted361);
    const auto [e362, is_inserted362] = boost::add_edge(v169, v363, g);
    g[e362].character                 = 'C';
    assert(is_inserted362);
    const auto [e363, is_inserted363] = boost::add_edge(v363, v364, g);
    g[e363].character                 = 'C';
    assert(is_inserted363);
    const auto [e364, is_inserted364] = boost::add_edge(v172, v365, g);
    g[e364].character                 = 'c';
    assert(is_inserted364);
    const auto [e365, is_inserted365] = boost::add_edge(v365, v366, g);
    g[e365].character                 = 'c';
    assert(is_inserted365);
    const auto [e366, is_inserted366] = boost::add_edge(v366, v367, g);
    g[e366].character                 = 'c';
    assert(is_inserted366);
    const auto [e367, is_inserted367] = boost::add_edge(v367, v368, g);
    g[e367].character                 = '0';
    assert(is_inserted367);
    const auto [e368, is_inserted368] = boost::add_edge(v368, v369, g);
    g[e368].character                 = ')';
    assert(is_inserted368);
    const auto [e369, is_inserted369] = boost::add_edge(v72, v370, g);
    g[e369].character                 = '1';
    assert(is_inserted369);
    const auto [e370, is_inserted370] = boost::add_edge(v75, v371, g);
    g[e370].character                 = 'F';
    assert(is_inserted370);
    const auto [e371, is_inserted371] = boost::add_edge(v371, v372, g);
    g[e371].character                 = ')';
    assert(is_inserted371);
    const auto [e372, is_inserted372] = boost::add_edge(v372, v373, g);
    g[e372].character                 = 'c';
    assert(is_inserted372);
    const auto [e373, is_inserted373] = boost::add_edge(v373, v374, g);
    g[e373].character                 = 'c';
    assert(is_inserted373);
    const auto [e374, is_inserted374] = boost::add_edge(v374, v375, g);
    g[e374].character                 = '0';
    assert(is_inserted374);
    const auto [e375, is_inserted375] = boost::add_edge(v67, v376, g);
    g[e375].character                 = ')';
    assert(is_inserted375);
    const auto [e376, is_inserted376] = boost::add_edge(v7, v377, g);
    g[e376].character                 = 's';
    assert(is_inserted376);
    const auto [e377, is_inserted377] = boost::add_edge(v1, v378, g);
    g[e377].character                 = '[';
    assert(is_inserted377);
    const auto [e378, is_inserted378] = boost::add_edge(v378, v379, g);
    g[e378].character                 = 'C';
    assert(is_inserted378);
    const auto [e379, is_inserted379] = boost::add_edge(v379, v380, g);
    g[e379].character                 = '@';
    assert(is_inserted379);
    const auto [e380, is_inserted380] = boost::add_edge(v380, v381, g);
    g[e380].character                 = 'H';
    assert(is_inserted380);
    const auto [e381, is_inserted381] = boost::add_edge(v381, v382, g);
    g[e381].character                 = ']';
    assert(is_inserted381);
    const auto [e382, is_inserted382] = boost::add_edge(v358, v383, g);
    g[e382].character                 = 'C';
    assert(is_inserted382);
    const auto [e383, is_inserted383] = boost::add_edge(v383, v384, g);
    g[e383].character                 = 'C';
    assert(is_inserted383);
    const auto [e384, is_inserted384] = boost::add_edge(v380, v385, g);
    g[e384].character                 = '@';
    assert(is_inserted384);
    const auto [e385, is_inserted385] = boost::add_edge(v385, v386, g);
    g[e385].character                 = 'H';
    assert(is_inserted385);
    const auto [e386, is_inserted386] = boost::add_edge(v386, v387, g);
    g[e386].character                 = ']';
    assert(is_inserted386);
    const auto [e387, is_inserted387] = boost::add_edge(v41, v388, g);
    g[e387].character                 = 'N';
    assert(is_inserted387);
    const auto [e388, is_inserted388] = boost::add_edge(v360, v389, g);
    g[e388].character                 = 'O';
    assert(is_inserted388);
    const auto [e389, is_inserted389] = boost::add_edge(v389, v390, g);
    g[e389].character                 = ')';
    assert(is_inserted389);
    const auto [e390, is_inserted390] = boost::add_edge(v149, v391, g);
    g[e390].character                 = '0';
    assert(is_inserted390);
    const auto [e391, is_inserted391] = boost::add_edge(v391, v392, g);
    g[e391].character                 = ')';
    assert(is_inserted391);
    const auto [e392, is_inserted392] = boost::add_edge(v13, v393, g);
    g[e392].character                 = 'N';
    assert(is_inserted392);
    const auto [e393, is_inserted393] = boost::add_edge(v53, v394, g);
    g[e393].character                 = '=';
    assert(is_inserted393);
    const auto [e394, is_inserted394] = boost::add_edge(v394, v395, g);
    g[e394].character                 = 'C';
    assert(is_inserted394);
    const auto [e395, is_inserted395] = boost::add_edge(v395, v396, g);
    g[e395].character                 = '(';
    assert(is_inserted395);
    const auto [e396, is_inserted396] = boost::add_edge(v44, v397, g);
    g[e396].character                 = ']';
    assert(is_inserted396);
    const auto [e397, is_inserted397] = boost::add_edge(v213, v398, g);
    g[e397].character                 = '0';
    assert(is_inserted397);
    const auto [e398, is_inserted398] = boost::add_edge(v268, v399, g);
    g[e398].character                 = '(';
    assert(is_inserted398);
    const auto [e399, is_inserted399] = boost::add_edge(v399, v400, g);
    g[e399].character                 = '=';
    assert(is_inserted399);
    const auto [e400, is_inserted400] = boost::add_edge(v400, v401, g);
    g[e400].character                 = 'O';
    assert(is_inserted400);
    const auto [e401, is_inserted401] = boost::add_edge(v401, v402, g);
    g[e401].character                 = ')';
    assert(is_inserted401);
    const auto [e402, is_inserted402] = boost::add_edge(v41, v403, g);
    g[e402].character                 = 'O';
    assert(is_inserted402);
    const auto [e403, is_inserted403] = boost::add_edge(v403, v404, g);
    g[e403].character                 = ')';
    assert(is_inserted403);
    const auto [e404, is_inserted404] = boost::add_edge(v143, v405, g);
    g[e404].character                 = 'n';
    assert(is_inserted404);
    const auto [e405, is_inserted405] = boost::add_edge(v41, v406, g);
    g[e405].character                 = 'F';
    assert(is_inserted405);
    const auto [e406, is_inserted406] = boost::add_edge(v406, v407, g);
    g[e406].character                 = ')';
    assert(is_inserted406);
    const auto [e407, is_inserted407] = boost::add_edge(v38, v408, g);
    g[e407].character                 = 'o';
    assert(is_inserted407);
    const auto [e408, is_inserted408] = boost::add_edge(v213, v409, g);
    g[e408].character                 = 'c';
    assert(is_inserted408);
    const auto [e409, is_inserted409] = boost::add_edge(v409, v410, g);
    g[e409].character                 = '(';
    assert(is_inserted409);
    const auto [e410, is_inserted410] = boost::add_edge(v116, v411, g);
    g[e410].character                 = 'c';
    assert(is_inserted410);
    const auto [e411, is_inserted411] = boost::add_edge(v411, v412, g);
    g[e411].character                 = 'c';
    assert(is_inserted411);
    const auto [e412, is_inserted412] = boost::add_edge(v75, v413, g);
    g[e412].character                 = 'C';
    assert(is_inserted412);
    const auto [e413, is_inserted413] = boost::add_edge(v413, v414, g);
    g[e413].character                 = 'l';
    assert(is_inserted413);
    const auto [e414, is_inserted414] = boost::add_edge(v414, v415, g);
    g[e414].character                 = ')';
    assert(is_inserted414);
    const auto [e415, is_inserted415] = boost::add_edge(v88, v416, g);
    g[e415].character                 = 'C';
    assert(is_inserted415);
    const auto [e416, is_inserted416] = boost::add_edge(v416, v417, g);
    g[e416].character                 = '0';
    assert(is_inserted416);
    const auto [e417, is_inserted417] = boost::add_edge(v417, v418, g);
    g[e417].character                 = ')';
    assert(is_inserted417);
    const auto [e418, is_inserted418] = boost::add_edge(v200, v419, g);
    g[e418].character                 = '=';
    assert(is_inserted418);
    const auto [e419, is_inserted419] = boost::add_edge(v419, v420, g);
    g[e419].character                 = 'O';
    assert(is_inserted419);
    const auto [e420, is_inserted420] = boost::add_edge(v420, v421, g);
    g[e420].character                 = ')';
    assert(is_inserted420);
    const auto [e421, is_inserted421] = boost::add_edge(v421, v422, g);
    g[e421].character                 = 'N';
    assert(is_inserted421);
    const auto [e422, is_inserted422] = boost::add_edge(v123, v423, g);
    g[e422].character                 = ')';
    assert(is_inserted422);
    const auto [e423, is_inserted423] = boost::add_edge(v8, v424, g);
    g[e423].character                 = 'o';
    assert(is_inserted423);
    const auto [e424, is_inserted424] = boost::add_edge(v6, v425, g);
    g[e424].character                 = '[';
    assert(is_inserted424);
    const auto [e425, is_inserted425] = boost::add_edge(v425, v426, g);
    g[e425].character                 = 'n';
    assert(is_inserted425);
    const auto [e426, is_inserted426] = boost::add_edge(v426, v427, g);
    g[e426].character                 = 'H';
    assert(is_inserted426);
    const auto [e427, is_inserted427] = boost::add_edge(v427, v428, g);
    g[e427].character                 = ']';
    assert(is_inserted427);
    dictionary.root = v0;
    return dictionary;
  }

} // namespace smiles
